
firmware_ver_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00001b1c  00001bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800214  00800214  00001bc4  2**0
                  ALLOC
  3 .stab         00001650  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000057e  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003798  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d37  00000000  00000000  00003838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e1  00000000  00000000  0000456f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067c  00000000  00000000  00004750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00004dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001de  00000000  00000000  00004fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a2  00000000  00000000  0000517e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e1       	ldi	r30, 0x1C	; 28
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 31       	cpi	r26, 0x14	; 20
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 e1       	ldi	r26, 0x14	; 20
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 32       	cpi	r26, 0x26	; 38
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 12 0c 	call	0x1824	; 0x1824 <main>
     122:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:



//Function to Reset LCD
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	a0 e8       	ldi	r26, 0x80	; 128
     14a:	bf e3       	ldi	r27, 0x3F	; 63
     14c:	89 83       	std	Y+1, r24	; 0x01
     14e:	9a 83       	std	Y+2, r25	; 0x02
     150:	ab 83       	std	Y+3, r26	; 0x03
     152:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     154:	69 81       	ldd	r22, Y+1	; 0x01
     156:	7a 81       	ldd	r23, Y+2	; 0x02
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	26 e6       	ldi	r18, 0x66	; 102
     15e:	36 e6       	ldi	r19, 0x66	; 102
     160:	46 e6       	ldi	r20, 0x66	; 102
     162:	55 e4       	ldi	r21, 0x45	; 69
     164:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	8d 83       	std	Y+5, r24	; 0x05
     16e:	9e 83       	std	Y+6, r25	; 0x06
     170:	af 83       	std	Y+7, r26	; 0x07
     172:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e8       	ldi	r20, 0x80	; 128
     184:	5f e3       	ldi	r21, 0x3F	; 63
     186:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     18a:	88 23       	and	r24, r24
     18c:	0c f0       	brlt	.+2      	; 0x190 <lcd_set_4bit+0x66>
     18e:	10 e0       	ldi	r17, 0x00	; 0
     190:	11 23       	and	r17, r17
     192:	29 f0       	breq	.+10     	; 0x19e <lcd_set_4bit+0x74>
		__ticks = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9a 87       	std	Y+10, r25	; 0x0a
     19a:	89 87       	std	Y+9, r24	; 0x09
     19c:	46 c0       	rjmp	.+140    	; 0x22a <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     19e:	11 e0       	ldi	r17, 0x01	; 1
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	3f ef       	ldi	r19, 0xFF	; 255
     1ac:	4f e7       	ldi	r20, 0x7F	; 127
     1ae:	57 e4       	ldi	r21, 0x47	; 71
     1b0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     1b4:	18 16       	cp	r1, r24
     1b6:	0c f0       	brlt	.+2      	; 0x1ba <lcd_set_4bit+0x90>
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	11 23       	and	r17, r17
     1bc:	61 f1       	breq	.+88     	; 0x216 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1be:	69 81       	ldd	r22, Y+1	; 0x01
     1c0:	7a 81       	ldd	r23, Y+2	; 0x02
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e2       	ldi	r20, 0x20	; 32
     1cc:	51 e4       	ldi	r21, 0x41	; 65
     1ce:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	9a 87       	std	Y+10, r25	; 0x0a
     1e4:	89 87       	std	Y+9, r24	; 0x09
     1e6:	12 c0       	rjmp	.+36     	; 0x20c <lcd_set_4bit+0xe2>
     1e8:	80 e7       	ldi	r24, 0x70	; 112
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	9c 87       	std	Y+12, r25	; 0x0c
     1ee:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f4:	8c 01       	movw	r16, r24
     1f6:	c8 01       	movw	r24, r16
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0xce>
     1fc:	8c 01       	movw	r16, r24
     1fe:	1c 87       	std	Y+12, r17	; 0x0c
     200:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     202:	89 85       	ldd	r24, Y+9	; 0x09
     204:	9a 85       	ldd	r25, Y+10	; 0x0a
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	9a 87       	std	Y+10, r25	; 0x0a
     20a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	89 85       	ldd	r24, Y+9	; 0x09
     20e:	9a 85       	ldd	r25, Y+10	; 0x0a
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	51 f7       	brne	.-44     	; 0x1e8 <lcd_set_4bit+0xbe>
     214:	17 c0       	rjmp	.+46     	; 0x244 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     216:	6d 81       	ldd	r22, Y+5	; 0x05
     218:	7e 81       	ldd	r23, Y+6	; 0x06
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 85       	ldd	r25, Y+8	; 0x08
     21e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	89 85       	ldd	r24, Y+9	; 0x09
     22c:	9a 85       	ldd	r25, Y+10	; 0x0a
     22e:	9e 87       	std	Y+14, r25	; 0x0e
     230:	8d 87       	std	Y+13, r24	; 0x0d
     232:	8d 85       	ldd	r24, Y+13	; 0x0d
     234:	9e 85       	ldd	r25, Y+14	; 0x0e
     236:	8c 01       	movw	r16, r24
     238:	f8 01       	movw	r30, r16
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x110>
     23e:	8f 01       	movw	r16, r30
     240:	1e 87       	std	Y+14, r17	; 0x0e
     242:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	88 e2       	ldi	r24, 0x28	; 40
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 e2       	ldi	r18, 0x28	; 40
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2e 7f       	andi	r18, 0xFE	; 254
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     256:	88 e2       	ldi	r24, 0x28	; 40
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 e2       	ldi	r18, 0x28	; 40
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	2d 7f       	andi	r18, 0xFD	; 253
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     268:	88 e2       	ldi	r24, 0x28	; 40
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	20 e3       	ldi	r18, 0x30	; 48
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     272:	88 e2       	ldi	r24, 0x28	; 40
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	28 e2       	ldi	r18, 0x28	; 40
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	24 60       	ori	r18, 0x04	; 4
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	b0 e4       	ldi	r27, 0x40	; 64
     28c:	8f 87       	std	Y+15, r24	; 0x0f
     28e:	98 8b       	std	Y+16, r25	; 0x10
     290:	a9 8b       	std	Y+17, r26	; 0x11
     292:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     294:	6f 85       	ldd	r22, Y+15	; 0x0f
     296:	78 89       	ldd	r23, Y+16	; 0x10
     298:	89 89       	ldd	r24, Y+17	; 0x11
     29a:	9a 89       	ldd	r25, Y+18	; 0x12
     29c:	26 e6       	ldi	r18, 0x66	; 102
     29e:	36 e6       	ldi	r19, 0x66	; 102
     2a0:	46 e6       	ldi	r20, 0x66	; 102
     2a2:	55 e4       	ldi	r21, 0x45	; 69
     2a4:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	8b 8b       	std	Y+19, r24	; 0x13
     2ae:	9c 8b       	std	Y+20, r25	; 0x14
     2b0:	ad 8b       	std	Y+21, r26	; 0x15
     2b2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	6b 89       	ldd	r22, Y+19	; 0x13
     2b8:	7c 89       	ldd	r23, Y+20	; 0x14
     2ba:	8d 89       	ldd	r24, Y+21	; 0x15
     2bc:	9e 89       	ldd	r25, Y+22	; 0x16
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e8       	ldi	r20, 0x80	; 128
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     2ca:	88 23       	and	r24, r24
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <lcd_set_4bit+0x1a6>
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	11 23       	and	r17, r17
     2d2:	29 f0       	breq	.+10     	; 0x2de <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	98 8f       	std	Y+24, r25	; 0x18
     2da:	8f 8b       	std	Y+23, r24	; 0x17
     2dc:	46 c0       	rjmp	.+140    	; 0x36a <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	6b 89       	ldd	r22, Y+19	; 0x13
     2e2:	7c 89       	ldd	r23, Y+20	; 0x14
     2e4:	8d 89       	ldd	r24, Y+21	; 0x15
     2e6:	9e 89       	ldd	r25, Y+22	; 0x16
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
     2ec:	4f e7       	ldi	r20, 0x7F	; 127
     2ee:	57 e4       	ldi	r21, 0x47	; 71
     2f0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <lcd_set_4bit+0x1d0>
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	11 23       	and	r17, r17
     2fc:	61 f1       	breq	.+88     	; 0x356 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fe:	6f 85       	ldd	r22, Y+15	; 0x0f
     300:	78 89       	ldd	r23, Y+16	; 0x10
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	9a 89       	ldd	r25, Y+18	; 0x12
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e2       	ldi	r20, 0x20	; 32
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	98 8f       	std	Y+24, r25	; 0x18
     324:	8f 8b       	std	Y+23, r24	; 0x17
     326:	12 c0       	rjmp	.+36     	; 0x34c <lcd_set_4bit+0x222>
     328:	80 e7       	ldi	r24, 0x70	; 112
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9a 8f       	std	Y+26, r25	; 0x1a
     32e:	89 8f       	std	Y+25, r24	; 0x19
     330:	89 8d       	ldd	r24, Y+25	; 0x19
     332:	9a 8d       	ldd	r25, Y+26	; 0x1a
     334:	8c 01       	movw	r16, r24
     336:	c8 01       	movw	r24, r16
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_set_4bit+0x20e>
     33c:	8c 01       	movw	r16, r24
     33e:	1a 8f       	std	Y+26, r17	; 0x1a
     340:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     342:	8f 89       	ldd	r24, Y+23	; 0x17
     344:	98 8d       	ldd	r25, Y+24	; 0x18
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	98 8f       	std	Y+24, r25	; 0x18
     34a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	8f 89       	ldd	r24, Y+23	; 0x17
     34e:	98 8d       	ldd	r25, Y+24	; 0x18
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	51 f7       	brne	.-44     	; 0x328 <lcd_set_4bit+0x1fe>
     354:	17 c0       	rjmp	.+46     	; 0x384 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     356:	6b 89       	ldd	r22, Y+19	; 0x13
     358:	7c 89       	ldd	r23, Y+20	; 0x14
     35a:	8d 89       	ldd	r24, Y+21	; 0x15
     35c:	9e 89       	ldd	r25, Y+22	; 0x16
     35e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	98 8f       	std	Y+24, r25	; 0x18
     368:	8f 8b       	std	Y+23, r24	; 0x17
     36a:	8f 89       	ldd	r24, Y+23	; 0x17
     36c:	98 8d       	ldd	r25, Y+24	; 0x18
     36e:	9c 8f       	std	Y+28, r25	; 0x1c
     370:	8b 8f       	std	Y+27, r24	; 0x1b
     372:	8b 8d       	ldd	r24, Y+27	; 0x1b
     374:	9c 8d       	ldd	r25, Y+28	; 0x1c
     376:	8c 01       	movw	r16, r24
     378:	f8 01       	movw	r30, r16
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_set_4bit+0x250>
     37e:	8f 01       	movw	r16, r30
     380:	1c 8f       	std	Y+28, r17	; 0x1c
     382:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     384:	88 e2       	ldi	r24, 0x28	; 40
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	28 e2       	ldi	r18, 0x28	; 40
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	2b 7f       	andi	r18, 0xFB	; 251
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e8       	ldi	r26, 0x80	; 128
     39c:	bf e3       	ldi	r27, 0x3F	; 63
     39e:	8d 8f       	std	Y+29, r24	; 0x1d
     3a0:	9e 8f       	std	Y+30, r25	; 0x1e
     3a2:	af 8f       	std	Y+31, r26	; 0x1f
     3a4:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3ac:	98 a1       	lds	r25, 0x48
     3ae:	26 e6       	ldi	r18, 0x66	; 102
     3b0:	36 e6       	ldi	r19, 0x66	; 102
     3b2:	46 e6       	ldi	r20, 0x66	; 102
     3b4:	55 e4       	ldi	r21, 0x45	; 69
     3b6:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	89 a3       	lds	r24, 0x59
     3c0:	9a a3       	lds	r25, 0x5a
     3c2:	ab a3       	lds	r26, 0x5b
     3c4:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	69 a1       	lds	r22, 0x49
     3ca:	7a a1       	lds	r23, 0x4a
     3cc:	8b a1       	lds	r24, 0x4b
     3ce:	9c a1       	lds	r25, 0x4c
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     3dc:	88 23       	and	r24, r24
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <lcd_set_4bit+0x2b8>
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	11 23       	and	r17, r17
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9e a3       	lds	r25, 0x5e
     3ec:	8d a3       	lds	r24, 0x5d
     3ee:	46 c0       	rjmp	.+140    	; 0x47c <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	69 a1       	lds	r22, 0x49
     3f4:	7a a1       	lds	r23, 0x4a
     3f6:	8b a1       	lds	r24, 0x4b
     3f8:	9c a1       	lds	r25, 0x4c
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	3f ef       	ldi	r19, 0xFF	; 255
     3fe:	4f e7       	ldi	r20, 0x7F	; 127
     400:	57 e4       	ldi	r21, 0x47	; 71
     402:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     406:	18 16       	cp	r1, r24
     408:	0c f0       	brlt	.+2      	; 0x40c <lcd_set_4bit+0x2e2>
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	11 23       	and	r17, r17
     40e:	61 f1       	breq	.+88     	; 0x468 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     410:	6d 8d       	ldd	r22, Y+29	; 0x1d
     412:	7e 8d       	ldd	r23, Y+30	; 0x1e
     414:	8f 8d       	ldd	r24, Y+31	; 0x1f
     416:	98 a1       	lds	r25, 0x48
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e2       	ldi	r20, 0x20	; 32
     41e:	51 e4       	ldi	r21, 0x41	; 65
     420:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	9e a3       	lds	r25, 0x5e
     436:	8d a3       	lds	r24, 0x5d
     438:	12 c0       	rjmp	.+36     	; 0x45e <lcd_set_4bit+0x334>
     43a:	80 e7       	ldi	r24, 0x70	; 112
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	98 a7       	lds	r25, 0x78
     440:	8f a3       	lds	r24, 0x5f
     442:	8f a1       	lds	r24, 0x4f
     444:	98 a5       	lds	r25, 0x68
     446:	8c 01       	movw	r16, r24
     448:	c8 01       	movw	r24, r16
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_set_4bit+0x320>
     44e:	8c 01       	movw	r16, r24
     450:	18 a7       	lds	r17, 0x78
     452:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     454:	8d a1       	lds	r24, 0x4d
     456:	9e a1       	lds	r25, 0x4e
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	9e a3       	lds	r25, 0x5e
     45c:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	8d a1       	lds	r24, 0x4d
     460:	9e a1       	lds	r25, 0x4e
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	51 f7       	brne	.-44     	; 0x43a <lcd_set_4bit+0x310>
     466:	17 c0       	rjmp	.+46     	; 0x496 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     468:	69 a1       	lds	r22, 0x49
     46a:	7a a1       	lds	r23, 0x4a
     46c:	8b a1       	lds	r24, 0x4b
     46e:	9c a1       	lds	r25, 0x4c
     470:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	9e a3       	lds	r25, 0x5e
     47a:	8d a3       	lds	r24, 0x5d
     47c:	8d a1       	lds	r24, 0x4d
     47e:	9e a1       	lds	r25, 0x4e
     480:	9a a7       	lds	r25, 0x7a
     482:	89 a7       	lds	r24, 0x79
     484:	89 a5       	lds	r24, 0x69
     486:	9a a5       	lds	r25, 0x6a
     488:	8c 01       	movw	r16, r24
     48a:	f8 01       	movw	r30, r16
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_set_4bit+0x362>
     490:	8f 01       	movw	r16, r30
     492:	1a a7       	lds	r17, 0x7a
     494:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     496:	88 e2       	ldi	r24, 0x28	; 40
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	28 e2       	ldi	r18, 0x28	; 40
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	2e 7f       	andi	r18, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4a8:	88 e2       	ldi	r24, 0x28	; 40
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	28 e2       	ldi	r18, 0x28	; 40
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	2d 7f       	andi	r18, 0xFD	; 253
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     4ba:	88 e2       	ldi	r24, 0x28	; 40
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	20 e3       	ldi	r18, 0x30	; 48
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     4c4:	88 e2       	ldi	r24, 0x28	; 40
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	28 e2       	ldi	r18, 0x28	; 40
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	f9 01       	movw	r30, r18
     4ce:	20 81       	ld	r18, Z
     4d0:	24 60       	ori	r18, 0x04	; 4
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	a0 ea       	ldi	r26, 0xA0	; 160
     4dc:	b0 e4       	ldi	r27, 0x40	; 64
     4de:	8b a7       	lds	r24, 0x7b
     4e0:	9c a7       	lds	r25, 0x7c
     4e2:	ad a7       	lds	r26, 0x7d
     4e4:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e6:	6b a5       	lds	r22, 0x6b
     4e8:	7c a5       	lds	r23, 0x6c
     4ea:	8d a5       	lds	r24, 0x6d
     4ec:	9e a5       	lds	r25, 0x6e
     4ee:	26 e6       	ldi	r18, 0x66	; 102
     4f0:	36 e6       	ldi	r19, 0x66	; 102
     4f2:	46 e6       	ldi	r20, 0x66	; 102
     4f4:	55 e4       	ldi	r21, 0x45	; 69
     4f6:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	8f a7       	lds	r24, 0x7f
     500:	98 ab       	sts	0x58, r25
     502:	a9 ab       	sts	0x59, r26
     504:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     506:	11 e0       	ldi	r17, 0x01	; 1
     508:	6f a5       	lds	r22, 0x6f
     50a:	78 a9       	sts	0x48, r23
     50c:	89 a9       	sts	0x49, r24
     50e:	9a a9       	sts	0x4a, r25
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	0c f0       	brlt	.+2      	; 0x522 <lcd_set_4bit+0x3f8>
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	11 23       	and	r17, r17
     524:	29 f0       	breq	.+10     	; 0x530 <lcd_set_4bit+0x406>
		__ticks = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9c ab       	sts	0x5c, r25
     52c:	8b ab       	sts	0x5b, r24
     52e:	46 c0       	rjmp	.+140    	; 0x5bc <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     530:	11 e0       	ldi	r17, 0x01	; 1
     532:	6f a5       	lds	r22, 0x6f
     534:	78 a9       	sts	0x48, r23
     536:	89 a9       	sts	0x49, r24
     538:	9a a9       	sts	0x4a, r25
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f e7       	ldi	r20, 0x7F	; 127
     540:	57 e4       	ldi	r21, 0x47	; 71
     542:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     546:	18 16       	cp	r1, r24
     548:	0c f0       	brlt	.+2      	; 0x54c <lcd_set_4bit+0x422>
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	11 23       	and	r17, r17
     54e:	61 f1       	breq	.+88     	; 0x5a8 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     550:	6b a5       	lds	r22, 0x6b
     552:	7c a5       	lds	r23, 0x6c
     554:	8d a5       	lds	r24, 0x6d
     556:	9e a5       	lds	r25, 0x6e
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e2       	ldi	r20, 0x20	; 32
     55e:	51 e4       	ldi	r21, 0x41	; 65
     560:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	9c ab       	sts	0x5c, r25
     576:	8b ab       	sts	0x5b, r24
     578:	12 c0       	rjmp	.+36     	; 0x59e <lcd_set_4bit+0x474>
     57a:	80 e7       	ldi	r24, 0x70	; 112
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	9e ab       	sts	0x5e, r25
     580:	8d ab       	sts	0x5d, r24
     582:	8d a9       	sts	0x4d, r24
     584:	9e a9       	sts	0x4e, r25
     586:	8c 01       	movw	r16, r24
     588:	c8 01       	movw	r24, r16
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_set_4bit+0x460>
     58e:	8c 01       	movw	r16, r24
     590:	1e ab       	sts	0x5e, r17
     592:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     594:	8b a9       	sts	0x4b, r24
     596:	9c a9       	sts	0x4c, r25
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	9c ab       	sts	0x5c, r25
     59c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59e:	8b a9       	sts	0x4b, r24
     5a0:	9c a9       	sts	0x4c, r25
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	51 f7       	brne	.-44     	; 0x57a <lcd_set_4bit+0x450>
     5a6:	17 c0       	rjmp	.+46     	; 0x5d6 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a8:	6f a5       	lds	r22, 0x6f
     5aa:	78 a9       	sts	0x48, r23
     5ac:	89 a9       	sts	0x49, r24
     5ae:	9a a9       	sts	0x4a, r25
     5b0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9c ab       	sts	0x5c, r25
     5ba:	8b ab       	sts	0x5b, r24
     5bc:	8b a9       	sts	0x4b, r24
     5be:	9c a9       	sts	0x4c, r25
     5c0:	98 af       	sts	0x78, r25
     5c2:	8f ab       	sts	0x5f, r24
     5c4:	8f a9       	sts	0x4f, r24
     5c6:	98 ad       	sts	0x68, r25
     5c8:	8c 01       	movw	r16, r24
     5ca:	f8 01       	movw	r30, r16
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_set_4bit+0x4a2>
     5d0:	8f 01       	movw	r16, r30
     5d2:	18 af       	sts	0x78, r17
     5d4:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	28 e2       	ldi	r18, 0x28	; 40
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	f9 01       	movw	r30, r18
     5e0:	20 81       	ld	r18, Z
     5e2:	2b 7f       	andi	r18, 0xFB	; 251
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e8       	ldi	r26, 0x80	; 128
     5ee:	bf e3       	ldi	r27, 0x3F	; 63
     5f0:	89 af       	sts	0x79, r24
     5f2:	9a af       	sts	0x7a, r25
     5f4:	ab af       	sts	0x7b, r26
     5f6:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f8:	69 ad       	sts	0x69, r22
     5fa:	7a ad       	sts	0x6a, r23
     5fc:	8b ad       	sts	0x6b, r24
     5fe:	9c ad       	sts	0x6c, r25
     600:	26 e6       	ldi	r18, 0x66	; 102
     602:	36 e6       	ldi	r19, 0x66	; 102
     604:	46 e6       	ldi	r20, 0x66	; 102
     606:	55 e4       	ldi	r21, 0x45	; 69
     608:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 01       	movw	r18, r28
     612:	23 5c       	subi	r18, 0xC3	; 195
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	f9 01       	movw	r30, r18
     618:	80 83       	st	Z, r24
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	a2 83       	std	Z+2, r26	; 0x02
     61e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	cd 96       	adiw	r24, 0x3d	; 61
     626:	fc 01       	movw	r30, r24
     628:	60 81       	ld	r22, Z
     62a:	71 81       	ldd	r23, Z+1	; 0x01
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	0c f0       	brlt	.+2      	; 0x642 <lcd_set_4bit+0x518>
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	11 23       	and	r17, r17
     644:	49 f0       	breq	.+18     	; 0x658 <lcd_set_4bit+0x52e>
		__ticks = 1;
     646:	ce 01       	movw	r24, r28
     648:	8f 5b       	subi	r24, 0xBF	; 191
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	31 83       	std	Z+1, r19	; 0x01
     654:	20 83       	st	Z, r18
     656:	6e c0       	rjmp	.+220    	; 0x734 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     658:	11 e0       	ldi	r17, 0x01	; 1
     65a:	ce 01       	movw	r24, r28
     65c:	cd 96       	adiw	r24, 0x3d	; 61
     65e:	fc 01       	movw	r30, r24
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	3f ef       	ldi	r19, 0xFF	; 255
     66c:	4f e7       	ldi	r20, 0x7F	; 127
     66e:	57 e4       	ldi	r21, 0x47	; 71
     670:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	0c f0       	brlt	.+2      	; 0x67a <lcd_set_4bit+0x550>
     678:	10 e0       	ldi	r17, 0x00	; 0
     67a:	11 23       	and	r17, r17
     67c:	09 f4       	brne	.+2      	; 0x680 <lcd_set_4bit+0x556>
     67e:	49 c0       	rjmp	.+146    	; 0x712 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     680:	69 ad       	sts	0x69, r22
     682:	7a ad       	sts	0x6a, r23
     684:	8b ad       	sts	0x6b, r24
     686:	9c ad       	sts	0x6c, r25
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e2       	ldi	r20, 0x20	; 32
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	8e 01       	movw	r16, r28
     69a:	0f 5b       	subi	r16, 0xBF	; 191
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	f8 01       	movw	r30, r16
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	80 83       	st	Z, r24
     6b0:	27 c0       	rjmp	.+78     	; 0x700 <lcd_set_4bit+0x5d6>
     6b2:	ce 01       	movw	r24, r28
     6b4:	8d 5b       	subi	r24, 0xBD	; 189
     6b6:	9f 4f       	sbci	r25, 0xFF	; 255
     6b8:	20 e7       	ldi	r18, 0x70	; 112
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	31 83       	std	Z+1, r19	; 0x01
     6c0:	20 83       	st	Z, r18
     6c2:	ce 01       	movw	r24, r28
     6c4:	8d 5b       	subi	r24, 0xBD	; 189
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	8c 01       	movw	r16, r24
     6d0:	c8 01       	movw	r24, r16
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <lcd_set_4bit+0x5a8>
     6d6:	8c 01       	movw	r16, r24
     6d8:	ce 01       	movw	r24, r28
     6da:	8d 5b       	subi	r24, 0xBD	; 189
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	11 83       	std	Z+1, r17	; 0x01
     6e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e4:	ce 01       	movw	r24, r28
     6e6:	8f 5b       	subi	r24, 0xBF	; 191
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	9e 01       	movw	r18, r28
     6ec:	2f 5b       	subi	r18, 0xBF	; 191
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	30 40       	sbci	r19, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     700:	ce 01       	movw	r24, r28
     702:	8f 5b       	subi	r24, 0xBF	; 191
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	89 f6       	brne	.-94     	; 0x6b2 <lcd_set_4bit+0x588>
     710:	2e c0       	rjmp	.+92     	; 0x76e <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	8e 01       	movw	r16, r28
     714:	0f 5b       	subi	r16, 0xBF	; 191
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	cd 96       	adiw	r24, 0x3d	; 61
     71c:	fc 01       	movw	r30, r24
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	f8 01       	movw	r30, r16
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
     734:	ce 01       	movw	r24, r28
     736:	8b 5b       	subi	r24, 0xBB	; 187
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	9e 01       	movw	r18, r28
     73c:	2f 5b       	subi	r18, 0xBF	; 191
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	fc 01       	movw	r30, r24
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
     74c:	ce 01       	movw	r24, r28
     74e:	8b 5b       	subi	r24, 0xBB	; 187
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	8c 01       	movw	r16, r24
     75a:	c8 01       	movw	r24, r16
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd_set_4bit+0x632>
     760:	8c 01       	movw	r16, r24
     762:	ce 01       	movw	r24, r28
     764:	8b 5b       	subi	r24, 0xBB	; 187
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	fc 01       	movw	r30, r24
     76a:	11 83       	std	Z+1, r17	; 0x01
     76c:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     76e:	88 e2       	ldi	r24, 0x28	; 40
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	28 e2       	ldi	r18, 0x28	; 40
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	20 81       	ld	r18, Z
     77a:	2e 7f       	andi	r18, 0xFE	; 254
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     780:	88 e2       	ldi	r24, 0x28	; 40
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	28 e2       	ldi	r18, 0x28	; 40
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	2d 7f       	andi	r18, 0xFD	; 253
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	20 e3       	ldi	r18, 0x30	; 48
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     79c:	88 e2       	ldi	r24, 0x28	; 40
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	28 e2       	ldi	r18, 0x28	; 40
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	24 60       	ori	r18, 0x04	; 4
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	9e 01       	movw	r18, r28
     7b0:	29 5b       	subi	r18, 0xB9	; 185
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 ea       	ldi	r26, 0xA0	; 160
     7ba:	b0 e4       	ldi	r27, 0x40	; 64
     7bc:	f9 01       	movw	r30, r18
     7be:	80 83       	st	Z, r24
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	a2 83       	std	Z+2, r26	; 0x02
     7c4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c6:	8e 01       	movw	r16, r28
     7c8:	05 5b       	subi	r16, 0xB5	; 181
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	89 5b       	subi	r24, 0xB9	; 185
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	fc 01       	movw	r30, r24
     7d4:	60 81       	ld	r22, Z
     7d6:	71 81       	ldd	r23, Z+1	; 0x01
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	93 81       	ldd	r25, Z+3	; 0x03
     7dc:	26 e6       	ldi	r18, 0x66	; 102
     7de:	36 e6       	ldi	r19, 0x66	; 102
     7e0:	46 e6       	ldi	r20, 0x66	; 102
     7e2:	55 e4       	ldi	r21, 0x45	; 69
     7e4:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	f8 01       	movw	r30, r16
     7ee:	80 83       	st	Z, r24
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	a2 83       	std	Z+2, r26	; 0x02
     7f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7f6:	ce 01       	movw	r24, r28
     7f8:	85 5b       	subi	r24, 0xB5	; 181
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	11 e0       	ldi	r17, 0x01	; 1
     7fe:	fc 01       	movw	r30, r24
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	93 81       	ldd	r25, Z+3	; 0x03
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	0c f0       	brlt	.+2      	; 0x81a <lcd_set_4bit+0x6f0>
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <lcd_set_4bit+0x706>
		__ticks = 1;
     81e:	ce 01       	movw	r24, r28
     820:	81 5b       	subi	r24, 0xB1	; 177
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	74 c0       	rjmp	.+232    	; 0x918 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     830:	ce 01       	movw	r24, r28
     832:	85 5b       	subi	r24, 0xB5	; 181
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	fc 01       	movw	r30, r24
     83a:	60 81       	ld	r22, Z
     83c:	71 81       	ldd	r23, Z+1	; 0x01
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	93 81       	ldd	r25, Z+3	; 0x03
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	3f ef       	ldi	r19, 0xFF	; 255
     846:	4f e7       	ldi	r20, 0x7F	; 127
     848:	57 e4       	ldi	r21, 0x47	; 71
     84a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <lcd_set_4bit+0x72a>
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	11 23       	and	r17, r17
     856:	09 f4       	brne	.+2      	; 0x85a <lcd_set_4bit+0x730>
     858:	4d c0       	rjmp	.+154    	; 0x8f4 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85a:	ce 01       	movw	r24, r28
     85c:	89 5b       	subi	r24, 0xB9	; 185
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	60 81       	ld	r22, Z
     864:	71 81       	ldd	r23, Z+1	; 0x01
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	8e 01       	movw	r16, r28
     87c:	01 5b       	subi	r16, 0xB1	; 177
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	f8 01       	movw	r30, r16
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
     892:	27 c0       	rjmp	.+78     	; 0x8e2 <lcd_set_4bit+0x7b8>
     894:	ce 01       	movw	r24, r28
     896:	8f 5a       	subi	r24, 0xAF	; 175
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	20 e7       	ldi	r18, 0x70	; 112
     89c:	31 e0       	ldi	r19, 0x01	; 1
     89e:	fc 01       	movw	r30, r24
     8a0:	31 83       	std	Z+1, r19	; 0x01
     8a2:	20 83       	st	Z, r18
     8a4:	ce 01       	movw	r24, r28
     8a6:	8f 5a       	subi	r24, 0xAF	; 175
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	8c 01       	movw	r16, r24
     8b2:	c8 01       	movw	r24, r16
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <lcd_set_4bit+0x78a>
     8b8:	8c 01       	movw	r16, r24
     8ba:	ce 01       	movw	r24, r28
     8bc:	8f 5a       	subi	r24, 0xAF	; 175
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	fc 01       	movw	r30, r24
     8c2:	11 83       	std	Z+1, r17	; 0x01
     8c4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	ce 01       	movw	r24, r28
     8c8:	81 5b       	subi	r24, 0xB1	; 177
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	9e 01       	movw	r18, r28
     8ce:	21 5b       	subi	r18, 0xB1	; 177
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	30 40       	sbci	r19, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e2:	ce 01       	movw	r24, r28
     8e4:	81 5b       	subi	r24, 0xB1	; 177
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	89 f6       	brne	.-94     	; 0x894 <lcd_set_4bit+0x76a>
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f4:	8e 01       	movw	r16, r28
     8f6:	01 5b       	subi	r16, 0xB1	; 177
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	ce 01       	movw	r24, r28
     8fc:	85 5b       	subi	r24, 0xB5	; 181
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	fc 01       	movw	r30, r24
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	ce 01       	movw	r24, r28
     91a:	8d 5a       	subi	r24, 0xAD	; 173
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	9e 01       	movw	r18, r28
     920:	21 5b       	subi	r18, 0xB1	; 177
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	31 81       	ldd	r19, Z+1	; 0x01
     92a:	fc 01       	movw	r30, r24
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	20 83       	st	Z, r18
     930:	ce 01       	movw	r24, r28
     932:	8d 5a       	subi	r24, 0xAD	; 173
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	91 81       	ldd	r25, Z+1	; 0x01
     93c:	8c 01       	movw	r16, r24
     93e:	c8 01       	movw	r24, r16
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <lcd_set_4bit+0x816>
     944:	8c 01       	movw	r16, r24
     946:	ce 01       	movw	r24, r28
     948:	8d 5a       	subi	r24, 0xAD	; 173
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	fc 01       	movw	r30, r24
     94e:	11 83       	std	Z+1, r17	; 0x01
     950:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     952:	88 e2       	ldi	r24, 0x28	; 40
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	28 e2       	ldi	r18, 0x28	; 40
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	2b 7f       	andi	r18, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	9e 01       	movw	r18, r28
     966:	2b 5a       	subi	r18, 0xAB	; 171
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e8       	ldi	r26, 0x80	; 128
     970:	bf e3       	ldi	r27, 0x3F	; 63
     972:	f9 01       	movw	r30, r18
     974:	80 83       	st	Z, r24
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	a2 83       	std	Z+2, r26	; 0x02
     97a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     97c:	8e 01       	movw	r16, r28
     97e:	07 5a       	subi	r16, 0xA7	; 167
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	ce 01       	movw	r24, r28
     984:	8b 5a       	subi	r24, 0xAB	; 171
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	fc 01       	movw	r30, r24
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	26 e6       	ldi	r18, 0x66	; 102
     994:	36 e6       	ldi	r19, 0x66	; 102
     996:	46 e6       	ldi	r20, 0x66	; 102
     998:	55 e4       	ldi	r21, 0x45	; 69
     99a:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 83       	st	Z, r24
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	a2 83       	std	Z+2, r26	; 0x02
     9aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9ac:	ce 01       	movw	r24, r28
     9ae:	87 5a       	subi	r24, 0xA7	; 167
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	11 e0       	ldi	r17, 0x01	; 1
     9b4:	fc 01       	movw	r30, r24
     9b6:	60 81       	ld	r22, Z
     9b8:	71 81       	ldd	r23, Z+1	; 0x01
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	93 81       	ldd	r25, Z+3	; 0x03
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <lcd_set_4bit+0x8a6>
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	11 23       	and	r17, r17
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9d4:	ce 01       	movw	r24, r28
     9d6:	83 5a       	subi	r24, 0xA3	; 163
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	74 c0       	rjmp	.+232    	; 0xace <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9e6:	ce 01       	movw	r24, r28
     9e8:	87 5a       	subi	r24, 0xA7	; 167
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	11 e0       	ldi	r17, 0x01	; 1
     9ee:	fc 01       	movw	r30, r24
     9f0:	60 81       	ld	r22, Z
     9f2:	71 81       	ldd	r23, Z+1	; 0x01
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	93 81       	ldd	r25, Z+3	; 0x03
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	3f ef       	ldi	r19, 0xFF	; 255
     9fc:	4f e7       	ldi	r20, 0x7F	; 127
     9fe:	57 e4       	ldi	r21, 0x47	; 71
     a00:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	0c f0       	brlt	.+2      	; 0xa0a <lcd_set_4bit+0x8e0>
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	11 23       	and	r17, r17
     a0c:	09 f4       	brne	.+2      	; 0xa10 <lcd_set_4bit+0x8e6>
     a0e:	4d c0       	rjmp	.+154    	; 0xaaa <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a10:	ce 01       	movw	r24, r28
     a12:	8b 5a       	subi	r24, 0xAB	; 171
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	51 e4       	ldi	r21, 0x41	; 65
     a28:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	8e 01       	movw	r16, r28
     a32:	03 5a       	subi	r16, 0xA3	; 163
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	f8 01       	movw	r30, r16
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	27 c0       	rjmp	.+78     	; 0xa98 <lcd_set_4bit+0x96e>
     a4a:	ce 01       	movw	r24, r28
     a4c:	81 5a       	subi	r24, 0xA1	; 161
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	20 e7       	ldi	r18, 0x70	; 112
     a52:	31 e0       	ldi	r19, 0x01	; 1
     a54:	fc 01       	movw	r30, r24
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	ce 01       	movw	r24, r28
     a5c:	81 5a       	subi	r24, 0xA1	; 161
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	8c 01       	movw	r16, r24
     a68:	c8 01       	movw	r24, r16
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_set_4bit+0x940>
     a6e:	8c 01       	movw	r16, r24
     a70:	ce 01       	movw	r24, r28
     a72:	81 5a       	subi	r24, 0xA1	; 161
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	11 83       	std	Z+1, r17	; 0x01
     a7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7c:	ce 01       	movw	r24, r28
     a7e:	83 5a       	subi	r24, 0xA3	; 163
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	9e 01       	movw	r18, r28
     a84:	23 5a       	subi	r18, 0xA3	; 163
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	31 81       	ldd	r19, Z+1	; 0x01
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	31 83       	std	Z+1, r19	; 0x01
     a96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	ce 01       	movw	r24, r28
     a9a:	83 5a       	subi	r24, 0xA3	; 163
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	89 f6       	brne	.-94     	; 0xa4a <lcd_set_4bit+0x920>
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aaa:	8e 01       	movw	r16, r28
     aac:	03 5a       	subi	r16, 0xA3	; 163
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	ce 01       	movw	r24, r28
     ab2:	87 5a       	subi	r24, 0xA7	; 167
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	f8 01       	movw	r30, r16
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	80 83       	st	Z, r24
     ace:	ce 01       	movw	r24, r28
     ad0:	8f 59       	subi	r24, 0x9F	; 159
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	9e 01       	movw	r18, r28
     ad6:	23 5a       	subi	r18, 0xA3	; 163
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	fc 01       	movw	r30, r24
     ae2:	31 83       	std	Z+1, r19	; 0x01
     ae4:	20 83       	st	Z, r18
     ae6:	ce 01       	movw	r24, r28
     ae8:	8f 59       	subi	r24, 0x9F	; 159
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	8c 01       	movw	r16, r24
     af4:	c8 01       	movw	r24, r16
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <lcd_set_4bit+0x9cc>
     afa:	8c 01       	movw	r16, r24
     afc:	ce 01       	movw	r24, r28
     afe:	8f 59       	subi	r24, 0x9F	; 159
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	fc 01       	movw	r30, r24
     b04:	11 83       	std	Z+1, r17	; 0x01
     b06:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b08:	88 e2       	ldi	r24, 0x28	; 40
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	28 e2       	ldi	r18, 0x28	; 40
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	2e 7f       	andi	r18, 0xFE	; 254
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b1a:	88 e2       	ldi	r24, 0x28	; 40
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	28 e2       	ldi	r18, 0x28	; 40
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	2d 7f       	andi	r18, 0xFD	; 253
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	20 e2       	ldi	r18, 0x20	; 32
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     b36:	88 e2       	ldi	r24, 0x28	; 40
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	28 e2       	ldi	r18, 0x28	; 40
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	24 60       	ori	r18, 0x04	; 4
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18
     b48:	9e 01       	movw	r18, r28
     b4a:	2d 59       	subi	r18, 0x9D	; 157
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 ea       	ldi	r26, 0xA0	; 160
     b54:	b0 e4       	ldi	r27, 0x40	; 64
     b56:	f9 01       	movw	r30, r18
     b58:	80 83       	st	Z, r24
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	a2 83       	std	Z+2, r26	; 0x02
     b5e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b60:	8e 01       	movw	r16, r28
     b62:	09 59       	subi	r16, 0x99	; 153
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	ce 01       	movw	r24, r28
     b68:	8d 59       	subi	r24, 0x9D	; 157
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	fc 01       	movw	r30, r24
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	26 e6       	ldi	r18, 0x66	; 102
     b78:	36 e6       	ldi	r19, 0x66	; 102
     b7a:	46 e6       	ldi	r20, 0x66	; 102
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	f8 01       	movw	r30, r16
     b88:	80 83       	st	Z, r24
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	a2 83       	std	Z+2, r26	; 0x02
     b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b90:	ce 01       	movw	r24, r28
     b92:	89 59       	subi	r24, 0x99	; 153
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	11 e0       	ldi	r17, 0x01	; 1
     b98:	fc 01       	movw	r30, r24
     b9a:	60 81       	ld	r22, Z
     b9c:	71 81       	ldd	r23, Z+1	; 0x01
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     bae:	88 23       	and	r24, r24
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <lcd_set_4bit+0xa8a>
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	11 23       	and	r17, r17
     bb6:	49 f0       	breq	.+18     	; 0xbca <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bb8:	ce 01       	movw	r24, r28
     bba:	85 59       	subi	r24, 0x95	; 149
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	74 c0       	rjmp	.+232    	; 0xcb2 <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bca:	ce 01       	movw	r24, r28
     bcc:	89 59       	subi	r24, 0x99	; 153
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f0       	brlt	.+2      	; 0xbee <lcd_set_4bit+0xac4>
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	11 23       	and	r17, r17
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <lcd_set_4bit+0xaca>
     bf2:	4d c0       	rjmp	.+154    	; 0xc8e <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	ce 01       	movw	r24, r28
     bf6:	8d 59       	subi	r24, 0x9D	; 157
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8e 01       	movw	r16, r28
     c16:	05 59       	subi	r16, 0x95	; 149
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	f8 01       	movw	r30, r16
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <lcd_set_4bit+0xb52>
     c2e:	ce 01       	movw	r24, r28
     c30:	83 59       	subi	r24, 0x93	; 147
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	20 e7       	ldi	r18, 0x70	; 112
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	fc 01       	movw	r30, r24
     c3a:	31 83       	std	Z+1, r19	; 0x01
     c3c:	20 83       	st	Z, r18
     c3e:	ce 01       	movw	r24, r28
     c40:	83 59       	subi	r24, 0x93	; 147
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	8c 01       	movw	r16, r24
     c4c:	c8 01       	movw	r24, r16
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <lcd_set_4bit+0xb24>
     c52:	8c 01       	movw	r16, r24
     c54:	ce 01       	movw	r24, r28
     c56:	83 59       	subi	r24, 0x93	; 147
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	fc 01       	movw	r30, r24
     c5c:	11 83       	std	Z+1, r17	; 0x01
     c5e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	ce 01       	movw	r24, r28
     c62:	85 59       	subi	r24, 0x95	; 149
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	9e 01       	movw	r18, r28
     c68:	25 59       	subi	r18, 0x95	; 149
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	31 81       	ldd	r19, Z+1	; 0x01
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	30 40       	sbci	r19, 0x00	; 0
     c76:	fc 01       	movw	r30, r24
     c78:	31 83       	std	Z+1, r19	; 0x01
     c7a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	ce 01       	movw	r24, r28
     c7e:	85 59       	subi	r24, 0x95	; 149
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	89 f6       	brne	.-94     	; 0xc2e <lcd_set_4bit+0xb04>
     c8c:	2f c0       	rjmp	.+94     	; 0xcec <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	8e 01       	movw	r16, r28
     c90:	05 59       	subi	r16, 0x95	; 149
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	ce 01       	movw	r24, r28
     c96:	89 59       	subi	r24, 0x99	; 153
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	fc 01       	movw	r30, r24
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	ce 01       	movw	r24, r28
     cb4:	81 59       	subi	r24, 0x91	; 145
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	9e 01       	movw	r18, r28
     cba:	25 59       	subi	r18, 0x95	; 149
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	ce 01       	movw	r24, r28
     ccc:	81 59       	subi	r24, 0x91	; 145
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	8c 01       	movw	r16, r24
     cd8:	c8 01       	movw	r24, r16
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <lcd_set_4bit+0xbb0>
     cde:	8c 01       	movw	r16, r24
     ce0:	ce 01       	movw	r24, r28
     ce2:	81 59       	subi	r24, 0x91	; 145
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	fc 01       	movw	r30, r24
     ce8:	11 83       	std	Z+1, r17	; 0x01
     cea:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     cec:	88 e2       	ldi	r24, 0x28	; 40
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	28 e2       	ldi	r18, 0x28	; 40
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	2b 7f       	andi	r18, 0xFB	; 251
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18

	
}
     cfe:	c0 59       	subi	r28, 0x90	; 144
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	2e 97       	sbiw	r28, 0x0e	; 14
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
     d2e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e8       	ldi	r26, 0x80	; 128
     d38:	bf e3       	ldi	r27, 0x3F	; 63
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	ab 83       	std	Y+3, r26	; 0x03
     d40:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d42:	69 81       	ldd	r22, Y+1	; 0x01
     d44:	7a 81       	ldd	r23, Y+2	; 0x02
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	26 e6       	ldi	r18, 0x66	; 102
     d4c:	36 e6       	ldi	r19, 0x66	; 102
     d4e:	46 e6       	ldi	r20, 0x66	; 102
     d50:	55 e4       	ldi	r21, 0x45	; 69
     d52:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	af 83       	std	Y+7, r26	; 0x07
     d60:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d62:	11 e0       	ldi	r17, 0x01	; 1
     d64:	6d 81       	ldd	r22, Y+5	; 0x05
     d66:	7e 81       	ldd	r23, Y+6	; 0x06
     d68:	8f 81       	ldd	r24, Y+7	; 0x07
     d6a:	98 85       	ldd	r25, Y+8	; 0x08
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     d78:	88 23       	and	r24, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <lcd_init+0x68>
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	11 23       	and	r17, r17
     d80:	29 f0       	breq	.+10     	; 0xd8c <lcd_init+0x76>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9a 87       	std	Y+10, r25	; 0x0a
     d88:	89 87       	std	Y+9, r24	; 0x09
     d8a:	46 c0       	rjmp	.+140    	; 0xe18 <lcd_init+0x102>
	else if (__tmp > 65535)
     d8c:	11 e0       	ldi	r17, 0x01	; 1
     d8e:	6d 81       	ldd	r22, Y+5	; 0x05
     d90:	7e 81       	ldd	r23, Y+6	; 0x06
     d92:	8f 81       	ldd	r24, Y+7	; 0x07
     d94:	98 85       	ldd	r25, Y+8	; 0x08
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     da2:	18 16       	cp	r1, r24
     da4:	0c f0       	brlt	.+2      	; 0xda8 <lcd_init+0x92>
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	11 23       	and	r17, r17
     daa:	61 f1       	breq	.+88     	; 0xe04 <lcd_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	69 81       	ldd	r22, Y+1	; 0x01
     dae:	7a 81       	ldd	r23, Y+2	; 0x02
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9a 87       	std	Y+10, r25	; 0x0a
     dd2:	89 87       	std	Y+9, r24	; 0x09
     dd4:	12 c0       	rjmp	.+36     	; 0xdfa <lcd_init+0xe4>
     dd6:	80 e7       	ldi	r24, 0x70	; 112
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	9c 87       	std	Y+12, r25	; 0x0c
     ddc:	8b 87       	std	Y+11, r24	; 0x0b
     dde:	8b 85       	ldd	r24, Y+11	; 0x0b
     de0:	9c 85       	ldd	r25, Y+12	; 0x0c
     de2:	8c 01       	movw	r16, r24
     de4:	c8 01       	movw	r24, r16
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <lcd_init+0xd0>
     dea:	8c 01       	movw	r16, r24
     dec:	1c 87       	std	Y+12, r17	; 0x0c
     dee:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9a 87       	std	Y+10, r25	; 0x0a
     df8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	51 f7       	brne	.-44     	; 0xdd6 <lcd_init+0xc0>
     e02:	17 c0       	rjmp	.+46     	; 0xe32 <lcd_init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6d 81       	ldd	r22, Y+5	; 0x05
     e06:	7e 81       	ldd	r23, Y+6	; 0x06
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	98 85       	ldd	r25, Y+8	; 0x08
     e0c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9a 87       	std	Y+10, r25	; 0x0a
     e16:	89 87       	std	Y+9, r24	; 0x09
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	9e 87       	std	Y+14, r25	; 0x0e
     e1e:	8d 87       	std	Y+13, r24	; 0x0d
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	8c 01       	movw	r16, r24
     e26:	c8 01       	movw	r24, r16
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <lcd_init+0x112>
     e2c:	8c 01       	movw	r16, r24
     e2e:	1e 87       	std	Y+14, r17	; 0x0e
     e30:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e32:	88 e2       	ldi	r24, 0x28	; 40
     e34:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x01);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x06);
     e3e:	86 e0       	ldi	r24, 0x06	; 6
     e40:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x0E);
     e44:	8e e0       	ldi	r24, 0x0E	; 14
     e46:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
	lcd_wr_command(0x80);
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
		
}
     e50:	2e 96       	adiw	r28, 0x0e	; 14
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	6e 97       	sbiw	r28, 0x1e	; 30
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e82:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	80 7f       	andi	r24, 0xF0	; 240
     e88:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
     e8a:	88 e2       	ldi	r24, 0x28	; 40
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	28 e2       	ldi	r18, 0x28	; 40
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	2f 70       	andi	r18, 0x0F	; 15
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
	lcd_port |= temp;
     e9c:	88 e2       	ldi	r24, 0x28	; 40
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	28 e2       	ldi	r18, 0x28	; 40
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	f9 01       	movw	r30, r18
     ea6:	30 81       	ld	r19, Z
     ea8:	29 81       	ldd	r18, Y+1	; 0x01
     eaa:	23 2b       	or	r18, r19
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
     eb0:	88 e2       	ldi	r24, 0x28	; 40
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	28 e2       	ldi	r18, 0x28	; 40
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	f9 01       	movw	r30, r18
     eba:	20 81       	ld	r18, Z
     ebc:	2e 7f       	andi	r18, 0xFE	; 254
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
     ec2:	88 e2       	ldi	r24, 0x28	; 40
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	28 e2       	ldi	r18, 0x28	; 40
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	f9 01       	movw	r30, r18
     ecc:	20 81       	ld	r18, Z
     ece:	2d 7f       	andi	r18, 0xFD	; 253
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
     ed4:	88 e2       	ldi	r24, 0x28	; 40
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	28 e2       	ldi	r18, 0x28	; 40
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	24 60       	ori	r18, 0x04	; 4
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 ea       	ldi	r26, 0xA0	; 160
     eec:	b0 e4       	ldi	r27, 0x40	; 64
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	9b 83       	std	Y+3, r25	; 0x03
     ef2:	ac 83       	std	Y+4, r26	; 0x04
     ef4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	6a 81       	ldd	r22, Y+2	; 0x02
     ef8:	7b 81       	ldd	r23, Y+3	; 0x03
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	26 e6       	ldi	r18, 0x66	; 102
     f00:	36 e6       	ldi	r19, 0x66	; 102
     f02:	46 e6       	ldi	r20, 0x66	; 102
     f04:	55 e4       	ldi	r21, 0x45	; 69
     f06:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	8e 83       	std	Y+6, r24	; 0x06
     f10:	9f 83       	std	Y+7, r25	; 0x07
     f12:	a8 87       	std	Y+8, r26	; 0x08
     f14:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f16:	11 e0       	ldi	r17, 0x01	; 1
     f18:	6e 81       	ldd	r22, Y+6	; 0x06
     f1a:	7f 81       	ldd	r23, Y+7	; 0x07
     f1c:	88 85       	ldd	r24, Y+8	; 0x08
     f1e:	99 85       	ldd	r25, Y+9	; 0x09
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <lcd_wr_command+0xcc>
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	11 23       	and	r17, r17
     f34:	29 f0       	breq	.+10     	; 0xf40 <lcd_wr_command+0xda>
		__ticks = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9b 87       	std	Y+11, r25	; 0x0b
     f3c:	8a 87       	std	Y+10, r24	; 0x0a
     f3e:	46 c0       	rjmp	.+140    	; 0xfcc <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f40:	11 e0       	ldi	r17, 0x01	; 1
     f42:	6e 81       	ldd	r22, Y+6	; 0x06
     f44:	7f 81       	ldd	r23, Y+7	; 0x07
     f46:	88 85       	ldd	r24, Y+8	; 0x08
     f48:	99 85       	ldd	r25, Y+9	; 0x09
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
     f56:	18 16       	cp	r1, r24
     f58:	0c f0       	brlt	.+2      	; 0xf5c <lcd_wr_command+0xf6>
     f5a:	10 e0       	ldi	r17, 0x00	; 0
     f5c:	11 23       	and	r17, r17
     f5e:	61 f1       	breq	.+88     	; 0xfb8 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6a 81       	ldd	r22, Y+2	; 0x02
     f62:	7b 81       	ldd	r23, Y+3	; 0x03
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9b 87       	std	Y+11, r25	; 0x0b
     f86:	8a 87       	std	Y+10, r24	; 0x0a
     f88:	12 c0       	rjmp	.+36     	; 0xfae <lcd_wr_command+0x148>
     f8a:	80 e7       	ldi	r24, 0x70	; 112
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	9d 87       	std	Y+13, r25	; 0x0d
     f90:	8c 87       	std	Y+12, r24	; 0x0c
     f92:	8c 85       	ldd	r24, Y+12	; 0x0c
     f94:	9d 85       	ldd	r25, Y+13	; 0x0d
     f96:	8c 01       	movw	r16, r24
     f98:	c8 01       	movw	r24, r16
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <lcd_wr_command+0x134>
     f9e:	8c 01       	movw	r16, r24
     fa0:	1d 87       	std	Y+13, r17	; 0x0d
     fa2:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9b 87       	std	Y+11, r25	; 0x0b
     fac:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	51 f7       	brne	.-44     	; 0xf8a <lcd_wr_command+0x124>
     fb6:	17 c0       	rjmp	.+46     	; 0xfe6 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	6e 81       	ldd	r22, Y+6	; 0x06
     fba:	7f 81       	ldd	r23, Y+7	; 0x07
     fbc:	88 85       	ldd	r24, Y+8	; 0x08
     fbe:	99 85       	ldd	r25, Y+9	; 0x09
     fc0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	9b 87       	std	Y+11, r25	; 0x0b
     fca:	8a 87       	std	Y+10, r24	; 0x0a
     fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fce:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd0:	9f 87       	std	Y+15, r25	; 0x0f
     fd2:	8e 87       	std	Y+14, r24	; 0x0e
     fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd8:	8c 01       	movw	r16, r24
     fda:	f8 01       	movw	r30, r16
     fdc:	31 97       	sbiw	r30, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <lcd_wr_command+0x176>
     fe0:	8f 01       	movw	r16, r30
     fe2:	1f 87       	std	Y+15, r17	; 0x0f
     fe4:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
     fe6:	88 e2       	ldi	r24, 0x28	; 40
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	28 e2       	ldi	r18, 0x28	; 40
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	2b 7f       	andi	r18, 0xFB	; 251
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
     ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffa:	8f 70       	andi	r24, 0x0F	; 15
     ffc:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     ffe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1000:	82 95       	swap	r24
    1002:	80 7f       	andi	r24, 0xF0	; 240
    1004:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1006:	88 e2       	ldi	r24, 0x28	; 40
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	28 e2       	ldi	r18, 0x28	; 40
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	2f 70       	andi	r18, 0x0F	; 15
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1018:	88 e2       	ldi	r24, 0x28	; 40
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	28 e2       	ldi	r18, 0x28	; 40
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	f9 01       	movw	r30, r18
    1022:	30 81       	ld	r19, Z
    1024:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1026:	23 2b       	or	r18, r19
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	28 e2       	ldi	r18, 0x28	; 40
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	f9 01       	movw	r30, r18
    1036:	20 81       	ld	r18, Z
    1038:	2e 7f       	andi	r18, 0xFE	; 254
    103a:	fc 01       	movw	r30, r24
    103c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    103e:	88 e2       	ldi	r24, 0x28	; 40
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	28 e2       	ldi	r18, 0x28	; 40
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	20 81       	ld	r18, Z
    104a:	2d 7f       	andi	r18, 0xFD	; 253
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1050:	88 e2       	ldi	r24, 0x28	; 40
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	28 e2       	ldi	r18, 0x28	; 40
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	f9 01       	movw	r30, r18
    105a:	20 81       	ld	r18, Z
    105c:	24 60       	ori	r18, 0x04	; 4
    105e:	fc 01       	movw	r30, r24
    1060:	20 83       	st	Z, r18
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 ea       	ldi	r26, 0xA0	; 160
    1068:	b0 e4       	ldi	r27, 0x40	; 64
    106a:	88 8b       	std	Y+16, r24	; 0x10
    106c:	99 8b       	std	Y+17, r25	; 0x11
    106e:	aa 8b       	std	Y+18, r26	; 0x12
    1070:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1072:	68 89       	ldd	r22, Y+16	; 0x10
    1074:	79 89       	ldd	r23, Y+17	; 0x11
    1076:	8a 89       	ldd	r24, Y+18	; 0x12
    1078:	9b 89       	ldd	r25, Y+19	; 0x13
    107a:	26 e6       	ldi	r18, 0x66	; 102
    107c:	36 e6       	ldi	r19, 0x66	; 102
    107e:	46 e6       	ldi	r20, 0x66	; 102
    1080:	55 e4       	ldi	r21, 0x45	; 69
    1082:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8c 8b       	std	Y+20, r24	; 0x14
    108c:	9d 8b       	std	Y+21, r25	; 0x15
    108e:	ae 8b       	std	Y+22, r26	; 0x16
    1090:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1092:	11 e0       	ldi	r17, 0x01	; 1
    1094:	6c 89       	ldd	r22, Y+20	; 0x14
    1096:	7d 89       	ldd	r23, Y+21	; 0x15
    1098:	8e 89       	ldd	r24, Y+22	; 0x16
    109a:	9f 89       	ldd	r25, Y+23	; 0x17
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	0c f0       	brlt	.+2      	; 0x10ae <lcd_wr_command+0x248>
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	11 23       	and	r17, r17
    10b0:	29 f0       	breq	.+10     	; 0x10bc <lcd_wr_command+0x256>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	99 8f       	std	Y+25, r25	; 0x19
    10b8:	88 8f       	std	Y+24, r24	; 0x18
    10ba:	46 c0       	rjmp	.+140    	; 0x1148 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10bc:	11 e0       	ldi	r17, 0x01	; 1
    10be:	6c 89       	ldd	r22, Y+20	; 0x14
    10c0:	7d 89       	ldd	r23, Y+21	; 0x15
    10c2:	8e 89       	ldd	r24, Y+22	; 0x16
    10c4:	9f 89       	ldd	r25, Y+23	; 0x17
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	57 e4       	ldi	r21, 0x47	; 71
    10ce:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <lcd_wr_command+0x272>
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	11 23       	and	r17, r17
    10da:	61 f1       	breq	.+88     	; 0x1134 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10dc:	68 89       	ldd	r22, Y+16	; 0x10
    10de:	79 89       	ldd	r23, Y+17	; 0x11
    10e0:	8a 89       	ldd	r24, Y+18	; 0x12
    10e2:	9b 89       	ldd	r25, Y+19	; 0x13
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e2       	ldi	r20, 0x20	; 32
    10ea:	51 e4       	ldi	r21, 0x41	; 65
    10ec:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	99 8f       	std	Y+25, r25	; 0x19
    1102:	88 8f       	std	Y+24, r24	; 0x18
    1104:	12 c0       	rjmp	.+36     	; 0x112a <lcd_wr_command+0x2c4>
    1106:	80 e7       	ldi	r24, 0x70	; 112
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	9b 8f       	std	Y+27, r25	; 0x1b
    110c:	8a 8f       	std	Y+26, r24	; 0x1a
    110e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1110:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1112:	8c 01       	movw	r16, r24
    1114:	c8 01       	movw	r24, r16
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <lcd_wr_command+0x2b0>
    111a:	8c 01       	movw	r16, r24
    111c:	1b 8f       	std	Y+27, r17	; 0x1b
    111e:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	88 8d       	ldd	r24, Y+24	; 0x18
    1122:	99 8d       	ldd	r25, Y+25	; 0x19
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	99 8f       	std	Y+25, r25	; 0x19
    1128:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	88 8d       	ldd	r24, Y+24	; 0x18
    112c:	99 8d       	ldd	r25, Y+25	; 0x19
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	51 f7       	brne	.-44     	; 0x1106 <lcd_wr_command+0x2a0>
    1132:	17 c0       	rjmp	.+46     	; 0x1162 <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1134:	6c 89       	ldd	r22, Y+20	; 0x14
    1136:	7d 89       	ldd	r23, Y+21	; 0x15
    1138:	8e 89       	ldd	r24, Y+22	; 0x16
    113a:	9f 89       	ldd	r25, Y+23	; 0x17
    113c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	99 8f       	std	Y+25, r25	; 0x19
    1146:	88 8f       	std	Y+24, r24	; 0x18
    1148:	88 8d       	ldd	r24, Y+24	; 0x18
    114a:	99 8d       	ldd	r25, Y+25	; 0x19
    114c:	9d 8f       	std	Y+29, r25	; 0x1d
    114e:	8c 8f       	std	Y+28, r24	; 0x1c
    1150:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1152:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1154:	8c 01       	movw	r16, r24
    1156:	f8 01       	movw	r30, r16
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <lcd_wr_command+0x2f2>
    115c:	8f 01       	movw	r16, r30
    115e:	1d 8f       	std	Y+29, r17	; 0x1d
    1160:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1162:	88 e2       	ldi	r24, 0x28	; 40
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	28 e2       	ldi	r18, 0x28	; 40
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	2b 7f       	andi	r18, 0xFB	; 251
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
}
    1174:	6e 96       	adiw	r28, 0x1e	; 30
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	6e 97       	sbiw	r28, 0x1e	; 30
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    11a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a6:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	80 7f       	andi	r24, 0xF0	; 240
    11ac:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    11ae:	88 e2       	ldi	r24, 0x28	; 40
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	28 e2       	ldi	r18, 0x28	; 40
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	2f 70       	andi	r18, 0x0F	; 15
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
	lcd_port |= temp;
    11c0:	88 e2       	ldi	r24, 0x28	; 40
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	28 e2       	ldi	r18, 0x28	; 40
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	30 81       	ld	r19, Z
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	23 2b       	or	r18, r19
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    11d4:	88 e2       	ldi	r24, 0x28	; 40
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	28 e2       	ldi	r18, 0x28	; 40
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	f9 01       	movw	r30, r18
    11de:	20 81       	ld	r18, Z
    11e0:	21 60       	ori	r18, 0x01	; 1
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    11e6:	88 e2       	ldi	r24, 0x28	; 40
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	28 e2       	ldi	r18, 0x28	; 40
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	f9 01       	movw	r30, r18
    11f0:	20 81       	ld	r18, Z
    11f2:	2d 7f       	andi	r18, 0xFD	; 253
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    11f8:	88 e2       	ldi	r24, 0x28	; 40
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	28 e2       	ldi	r18, 0x28	; 40
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	24 60       	ori	r18, 0x04	; 4
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 ea       	ldi	r26, 0xA0	; 160
    1210:	b0 e4       	ldi	r27, 0x40	; 64
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	9b 83       	std	Y+3, r25	; 0x03
    1216:	ac 83       	std	Y+4, r26	; 0x04
    1218:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6a 81       	ldd	r22, Y+2	; 0x02
    121c:	7b 81       	ldd	r23, Y+3	; 0x03
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	26 e6       	ldi	r18, 0x66	; 102
    1224:	36 e6       	ldi	r19, 0x66	; 102
    1226:	46 e6       	ldi	r20, 0x66	; 102
    1228:	55 e4       	ldi	r21, 0x45	; 69
    122a:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8e 83       	std	Y+6, r24	; 0x06
    1234:	9f 83       	std	Y+7, r25	; 0x07
    1236:	a8 87       	std	Y+8, r26	; 0x08
    1238:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    123a:	11 e0       	ldi	r17, 0x01	; 1
    123c:	6e 81       	ldd	r22, Y+6	; 0x06
    123e:	7f 81       	ldd	r23, Y+7	; 0x07
    1240:	88 85       	ldd	r24, Y+8	; 0x08
    1242:	99 85       	ldd	r25, Y+9	; 0x09
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
    1250:	88 23       	and	r24, r24
    1252:	0c f0       	brlt	.+2      	; 0x1256 <lcd_wr_char+0xcc>
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	11 23       	and	r17, r17
    1258:	29 f0       	breq	.+10     	; 0x1264 <lcd_wr_char+0xda>
		__ticks = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9b 87       	std	Y+11, r25	; 0x0b
    1260:	8a 87       	std	Y+10, r24	; 0x0a
    1262:	46 c0       	rjmp	.+140    	; 0x12f0 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    1264:	11 e0       	ldi	r17, 0x01	; 1
    1266:	6e 81       	ldd	r22, Y+6	; 0x06
    1268:	7f 81       	ldd	r23, Y+7	; 0x07
    126a:	88 85       	ldd	r24, Y+8	; 0x08
    126c:	99 85       	ldd	r25, Y+9	; 0x09
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	57 e4       	ldi	r21, 0x47	; 71
    1276:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
    127a:	18 16       	cp	r1, r24
    127c:	0c f0       	brlt	.+2      	; 0x1280 <lcd_wr_char+0xf6>
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	11 23       	and	r17, r17
    1282:	61 f1       	breq	.+88     	; 0x12dc <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6a 81       	ldd	r22, Y+2	; 0x02
    1286:	7b 81       	ldd	r23, Y+3	; 0x03
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9b 87       	std	Y+11, r25	; 0x0b
    12aa:	8a 87       	std	Y+10, r24	; 0x0a
    12ac:	12 c0       	rjmp	.+36     	; 0x12d2 <lcd_wr_char+0x148>
    12ae:	80 e7       	ldi	r24, 0x70	; 112
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	9d 87       	std	Y+13, r25	; 0x0d
    12b4:	8c 87       	std	Y+12, r24	; 0x0c
    12b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ba:	8c 01       	movw	r16, r24
    12bc:	c8 01       	movw	r24, r16
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <lcd_wr_char+0x134>
    12c2:	8c 01       	movw	r16, r24
    12c4:	1d 87       	std	Y+13, r17	; 0x0d
    12c6:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9b 87       	std	Y+11, r25	; 0x0b
    12d0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	51 f7       	brne	.-44     	; 0x12ae <lcd_wr_char+0x124>
    12da:	17 c0       	rjmp	.+46     	; 0x130a <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	6e 81       	ldd	r22, Y+6	; 0x06
    12de:	7f 81       	ldd	r23, Y+7	; 0x07
    12e0:	88 85       	ldd	r24, Y+8	; 0x08
    12e2:	99 85       	ldd	r25, Y+9	; 0x09
    12e4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9b 87       	std	Y+11, r25	; 0x0b
    12ee:	8a 87       	std	Y+10, r24	; 0x0a
    12f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f4:	9f 87       	std	Y+15, r25	; 0x0f
    12f6:	8e 87       	std	Y+14, r24	; 0x0e
    12f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    12fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    12fc:	8c 01       	movw	r16, r24
    12fe:	f8 01       	movw	r30, r16
    1300:	31 97       	sbiw	r30, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <lcd_wr_char+0x176>
    1304:	8f 01       	movw	r16, r30
    1306:	1f 87       	std	Y+15, r17	; 0x0f
    1308:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    130a:	88 e2       	ldi	r24, 0x28	; 40
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	28 e2       	ldi	r18, 0x28	; 40
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	f9 01       	movw	r30, r18
    1314:	20 81       	ld	r18, Z
    1316:	2b 7f       	andi	r18, 0xFB	; 251
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    131c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131e:	8f 70       	andi	r24, 0x0F	; 15
    1320:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1324:	82 95       	swap	r24
    1326:	80 7f       	andi	r24, 0xF0	; 240
    1328:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    132a:	88 e2       	ldi	r24, 0x28	; 40
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	28 e2       	ldi	r18, 0x28	; 40
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	f9 01       	movw	r30, r18
    1334:	20 81       	ld	r18, Z
    1336:	2f 70       	andi	r18, 0x0F	; 15
    1338:	fc 01       	movw	r30, r24
    133a:	20 83       	st	Z, r18
	lcd_port |= letter;
    133c:	88 e2       	ldi	r24, 0x28	; 40
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	28 e2       	ldi	r18, 0x28	; 40
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	30 81       	ld	r19, Z
    1348:	2e 8d       	ldd	r18, Y+30	; 0x1e
    134a:	23 2b       	or	r18, r19
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1350:	88 e2       	ldi	r24, 0x28	; 40
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	28 e2       	ldi	r18, 0x28	; 40
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	21 60       	ori	r18, 0x01	; 1
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1362:	88 e2       	ldi	r24, 0x28	; 40
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	28 e2       	ldi	r18, 0x28	; 40
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	f9 01       	movw	r30, r18
    136c:	20 81       	ld	r18, Z
    136e:	2d 7f       	andi	r18, 0xFD	; 253
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1374:	88 e2       	ldi	r24, 0x28	; 40
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	28 e2       	ldi	r18, 0x28	; 40
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	f9 01       	movw	r30, r18
    137e:	20 81       	ld	r18, Z
    1380:	24 60       	ori	r18, 0x04	; 4
    1382:	fc 01       	movw	r30, r24
    1384:	20 83       	st	Z, r18
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 ea       	ldi	r26, 0xA0	; 160
    138c:	b0 e4       	ldi	r27, 0x40	; 64
    138e:	88 8b       	std	Y+16, r24	; 0x10
    1390:	99 8b       	std	Y+17, r25	; 0x11
    1392:	aa 8b       	std	Y+18, r26	; 0x12
    1394:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1396:	68 89       	ldd	r22, Y+16	; 0x10
    1398:	79 89       	ldd	r23, Y+17	; 0x11
    139a:	8a 89       	ldd	r24, Y+18	; 0x12
    139c:	9b 89       	ldd	r25, Y+19	; 0x13
    139e:	26 e6       	ldi	r18, 0x66	; 102
    13a0:	36 e6       	ldi	r19, 0x66	; 102
    13a2:	46 e6       	ldi	r20, 0x66	; 102
    13a4:	55 e4       	ldi	r21, 0x45	; 69
    13a6:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8c 8b       	std	Y+20, r24	; 0x14
    13b0:	9d 8b       	std	Y+21, r25	; 0x15
    13b2:	ae 8b       	std	Y+22, r26	; 0x16
    13b4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13b6:	11 e0       	ldi	r17, 0x01	; 1
    13b8:	6c 89       	ldd	r22, Y+20	; 0x14
    13ba:	7d 89       	ldd	r23, Y+21	; 0x15
    13bc:	8e 89       	ldd	r24, Y+22	; 0x16
    13be:	9f 89       	ldd	r25, Y+23	; 0x17
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e8       	ldi	r20, 0x80	; 128
    13c6:	5f e3       	ldi	r21, 0x3F	; 63
    13c8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__cmpsf2>
    13cc:	88 23       	and	r24, r24
    13ce:	0c f0       	brlt	.+2      	; 0x13d2 <lcd_wr_char+0x248>
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	11 23       	and	r17, r17
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <lcd_wr_char+0x256>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	99 8f       	std	Y+25, r25	; 0x19
    13dc:	88 8f       	std	Y+24, r24	; 0x18
    13de:	46 c0       	rjmp	.+140    	; 0x146c <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e0:	11 e0       	ldi	r17, 0x01	; 1
    13e2:	6c 89       	ldd	r22, Y+20	; 0x14
    13e4:	7d 89       	ldd	r23, Y+21	; 0x15
    13e6:	8e 89       	ldd	r24, Y+22	; 0x16
    13e8:	9f 89       	ldd	r25, Y+23	; 0x17
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__gesf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	0c f0       	brlt	.+2      	; 0x13fc <lcd_wr_char+0x272>
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	11 23       	and	r17, r17
    13fe:	61 f1       	breq	.+88     	; 0x1458 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	68 89       	ldd	r22, Y+16	; 0x10
    1402:	79 89       	ldd	r23, Y+17	; 0x11
    1404:	8a 89       	ldd	r24, Y+18	; 0x12
    1406:	9b 89       	ldd	r25, Y+19	; 0x13
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	99 8f       	std	Y+25, r25	; 0x19
    1426:	88 8f       	std	Y+24, r24	; 0x18
    1428:	12 c0       	rjmp	.+36     	; 0x144e <lcd_wr_char+0x2c4>
    142a:	80 e7       	ldi	r24, 0x70	; 112
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	9b 8f       	std	Y+27, r25	; 0x1b
    1430:	8a 8f       	std	Y+26, r24	; 0x1a
    1432:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1434:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1436:	8c 01       	movw	r16, r24
    1438:	c8 01       	movw	r24, r16
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <lcd_wr_char+0x2b0>
    143e:	8c 01       	movw	r16, r24
    1440:	1b 8f       	std	Y+27, r17	; 0x1b
    1442:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	88 8d       	ldd	r24, Y+24	; 0x18
    1446:	99 8d       	ldd	r25, Y+25	; 0x19
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	99 8f       	std	Y+25, r25	; 0x19
    144c:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	88 8d       	ldd	r24, Y+24	; 0x18
    1450:	99 8d       	ldd	r25, Y+25	; 0x19
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	51 f7       	brne	.-44     	; 0x142a <lcd_wr_char+0x2a0>
    1456:	17 c0       	rjmp	.+46     	; 0x1486 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6c 89       	ldd	r22, Y+20	; 0x14
    145a:	7d 89       	ldd	r23, Y+21	; 0x15
    145c:	8e 89       	ldd	r24, Y+22	; 0x16
    145e:	9f 89       	ldd	r25, Y+23	; 0x17
    1460:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	99 8f       	std	Y+25, r25	; 0x19
    146a:	88 8f       	std	Y+24, r24	; 0x18
    146c:	88 8d       	ldd	r24, Y+24	; 0x18
    146e:	99 8d       	ldd	r25, Y+25	; 0x19
    1470:	9d 8f       	std	Y+29, r25	; 0x1d
    1472:	8c 8f       	std	Y+28, r24	; 0x1c
    1474:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1476:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1478:	8c 01       	movw	r16, r24
    147a:	f8 01       	movw	r30, r16
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <lcd_wr_char+0x2f2>
    1480:	8f 01       	movw	r16, r30
    1482:	1d 8f       	std	Y+29, r17	; 0x1d
    1484:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1486:	88 e2       	ldi	r24, 0x28	; 40
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	28 e2       	ldi	r18, 0x28	; 40
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	2b 7f       	andi	r18, 0xFB	; 251
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
}
    1498:	6e 96       	adiw	r28, 0x1e	; 30
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	0f 92       	push	r0
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		str++;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	fc 01       	movw	r30, r24
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	79 f7       	brne	.-34     	; 0x14d4 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	0f 92       	push	r0
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	99 f0       	breq	.+38     	; 0x1542 <lcd_cursor+0x42>
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	24 f4       	brge	.+8      	; 0x152a <lcd_cursor+0x2a>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	41 f0       	breq	.+16     	; 0x1538 <lcd_cursor+0x38>
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <lcd_cursor+0x60>
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	71 f0       	breq	.+28     	; 0x154c <lcd_cursor+0x4c>
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <lcd_cursor+0x56>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	81 58       	subi	r24, 0x81	; 129
    153c:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	81 54       	subi	r24, 0x41	; 65
    1546:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	8d 56       	subi	r24, 0x6D	; 109
    1550:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	8d 52       	subi	r24, 0x2D	; 45
    155a:	0e 94 33 07 	call	0xe66	; 0xe66 <lcd_wr_command>
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <lcd_cursor+0x62>
		default: break;
    1560:	00 00       	nop
	}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	27 97       	sbiw	r28, 0x07	; 7
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	6b 83       	std	Y+3, r22	; 0x03
    1584:	5d 83       	std	Y+5, r21	; 0x05
    1586:	4c 83       	std	Y+4, r20	; 0x04
    1588:	3f 83       	std	Y+7, r19	; 0x07
    158a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    158c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	88 23       	and	r24, r24
    1592:	19 f0       	breq	.+6      	; 0x159a <lcd_print+0x2e>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 23       	and	r24, r24
    1598:	19 f4       	brne	.+6      	; 0x15a0 <lcd_print+0x34>
	{
		lcd_home();
    159a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <lcd_home>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	6b 81       	ldd	r22, Y+3	; 0x03
    15a4:	0e 94 80 0a 	call	0x1500	; 0x1500 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	9f 81       	ldd	r25, Y+7	; 0x07
    15ac:	85 30       	cpi	r24, 0x05	; 5
    15ae:	91 05       	cpc	r25, r1
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <lcd_print+0x4c>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	b1 f4       	brne	.+44     	; 0x15e4 <lcd_print+0x78>
	{
		million=value/10000+48;
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	20 e1       	ldi	r18, 0x10	; 16
    15be:	37 e2       	ldi	r19, 0x27	; 39
    15c0:	b9 01       	movw	r22, r18
    15c2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    15c6:	9b 01       	movw	r18, r22
    15c8:	c9 01       	movw	r24, r18
    15ca:	c0 96       	adiw	r24, 0x30	; 48
    15cc:	90 93 1a 02 	sts	0x021A, r25
    15d0:	80 93 19 02 	sts	0x0219, r24
		lcd_wr_char(million);
    15d4:	80 91 19 02 	lds	r24, 0x0219
    15d8:	90 91 1a 02 	lds	r25, 0x021A
    15dc:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	91 05       	cpc	r25, r1
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <lcd_print+0x88>
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	19 f5       	brne	.+70     	; 0x163a <lcd_print+0xce>
	{
		temp = value/1000;
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	28 ee       	ldi	r18, 0xE8	; 232
    15fa:	33 e0       	ldi	r19, 0x03	; 3
    15fc:	b9 01       	movw	r22, r18
    15fe:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    1602:	9b 01       	movw	r18, r22
    1604:	c9 01       	movw	r24, r18
    1606:	90 93 1c 02 	sts	0x021C, r25
    160a:	80 93 1b 02 	sts	0x021B, r24
		thousand = temp%10 + 48;
    160e:	80 91 1b 02 	lds	r24, 0x021B
    1612:	90 91 1c 02 	lds	r25, 0x021C
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	b9 01       	movw	r22, r18
    161c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    1620:	c0 96       	adiw	r24, 0x30	; 48
    1622:	90 93 25 02 	sts	0x0225, r25
    1626:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(thousand);
    162a:	80 91 24 02 	lds	r24, 0x0224
    162e:	90 91 25 02 	lds	r25, 0x0225
    1632:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	19 f0       	breq	.+6      	; 0x164a <lcd_print+0xde>
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	19 f5       	brne	.+70     	; 0x1690 <lcd_print+0x124>
	{
		temp = value/100;
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	24 e6       	ldi	r18, 0x64	; 100
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	b9 01       	movw	r22, r18
    1654:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    1658:	9b 01       	movw	r18, r22
    165a:	c9 01       	movw	r24, r18
    165c:	90 93 1c 02 	sts	0x021C, r25
    1660:	80 93 1b 02 	sts	0x021B, r24
		hundred = temp%10 + 48;
    1664:	80 91 1b 02 	lds	r24, 0x021B
    1668:	90 91 1c 02 	lds	r25, 0x021C
    166c:	2a e0       	ldi	r18, 0x0A	; 10
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	b9 01       	movw	r22, r18
    1672:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    1676:	c0 96       	adiw	r24, 0x30	; 48
    1678:	90 93 21 02 	sts	0x0221, r25
    167c:	80 93 20 02 	sts	0x0220, r24
		lcd_wr_char(hundred);
    1680:	80 91 20 02 	lds	r24, 0x0220
    1684:	90 91 21 02 	lds	r25, 0x0221
    1688:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1690:	8e 81       	ldd	r24, Y+6	; 0x06
    1692:	9f 81       	ldd	r25, Y+7	; 0x07
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	19 f0       	breq	.+6      	; 0x16a0 <lcd_print+0x134>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	19 f5       	brne	.+70     	; 0x16e6 <lcd_print+0x17a>
	{
		temp = value/10;
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	2a e0       	ldi	r18, 0x0A	; 10
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	b9 01       	movw	r22, r18
    16aa:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    16ae:	9b 01       	movw	r18, r22
    16b0:	c9 01       	movw	r24, r18
    16b2:	90 93 1c 02 	sts	0x021C, r25
    16b6:	80 93 1b 02 	sts	0x021B, r24
		tens = temp%10 + 48;
    16ba:	80 91 1b 02 	lds	r24, 0x021B
    16be:	90 91 1c 02 	lds	r25, 0x021C
    16c2:	2a e0       	ldi	r18, 0x0A	; 10
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	b9 01       	movw	r22, r18
    16c8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    16cc:	c0 96       	adiw	r24, 0x30	; 48
    16ce:	90 93 1e 02 	sts	0x021E, r25
    16d2:	80 93 1d 02 	sts	0x021D, r24
		lcd_wr_char(tens);
    16d6:	80 91 1d 02 	lds	r24, 0x021D
    16da:	90 91 1e 02 	lds	r25, 0x021E
    16de:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
		flag=1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <lcd_print+0x18a>
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 f4       	brne	.+36     	; 0x171a <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	2a e0       	ldi	r18, 0x0A	; 10
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	b9 01       	movw	r22, r18
    1700:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__udivmodhi4>
    1704:	c0 96       	adiw	r24, 0x30	; 48
    1706:	90 93 23 02 	sts	0x0223, r25
    170a:	80 93 22 02 	sts	0x0222, r24
		lcd_wr_char(unit);
    170e:	80 91 22 02 	lds	r24, 0x0222
    1712:	90 91 23 02 	lds	r25, 0x0223
    1716:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
	}
	if(digits>5)
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	86 30       	cpi	r24, 0x06	; 6
    1720:	91 05       	cpc	r25, r1
    1722:	1c f0       	brlt	.+6      	; 0x172a <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    1724:	85 e4       	ldi	r24, 0x45	; 69
    1726:	0e 94 c5 08 	call	0x118a	; 0x118a <lcd_wr_char>
	}
	
}
    172a:	27 96       	adiw	r28, 0x07	; 7
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <serial_init>:
// desired baud rate:9600
// char size: 8 bit
// parity: Disabled

void serial_init(void)
{
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
    1744:	81 ed       	ldi	r24, 0xD1	; 209
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	fc 01       	movw	r30, r24
    174a:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    174c:	80 ed       	ldi	r24, 0xD0	; 208
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	10 82       	st	Z, r1
	UCSR2C = 0x06;
    1754:	82 ed       	ldi	r24, 0xD2	; 210
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	26 e0       	ldi	r18, 0x06	; 6
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
    175e:	84 ed       	ldi	r24, 0xD4	; 212
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	2f e5       	ldi	r18, 0x5F	; 95
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
    1768:	85 ed       	ldi	r24, 0xD5	; 213
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	fc 01       	movw	r30, r24
    176e:	10 82       	st	Z, r1
	UCSR2B = 0x98;
    1770:	81 ed       	ldi	r24, 0xD1	; 209
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	28 e9       	ldi	r18, 0x98	; 152
    1776:	fc 01       	movw	r30, r24
    1778:	20 83       	st	Z, r18
	sei();
    177a:	78 94       	sei
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <lcd_port_config>:

void lcd_port_config (void)
{
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    178a:	87 e2       	ldi	r24, 0x27	; 39
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	27 e2       	ldi	r18, 0x27	; 39
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	f9 01       	movw	r30, r18
    1794:	20 81       	ld	r18, Z
    1796:	27 6f       	ori	r18, 0xF7	; 247
    1798:	fc 01       	movw	r30, r24
    179a:	20 83       	st	Z, r18
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    179c:	88 e2       	ldi	r24, 0x28	; 40
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	28 e2       	ldi	r18, 0x28	; 40
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	f9 01       	movw	r30, r18
    17a6:	20 81       	ld	r18, Z
    17a8:	20 78       	andi	r18, 0x80	; 128
    17aa:	fc 01       	movw	r30, r24
    17ac:	20 83       	st	Z, r18
}
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <__vector_51>:


ISR(USART2_RX_vect) 		// ISR for receive complete interrupt
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	00 90 5b 00 	lds	r0, 0x005B
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
	flag++; //flag to count 3 bytes
    17d6:	80 91 00 02 	lds	r24, 0x0200
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	80 93 00 02 	sts	0x0200, r24
	ser_receive = UDR2;
    17e0:	86 ed       	ldi	r24, 0xD6	; 214
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	80 93 1f 02 	sts	0x021F, r24
	*(receive_buffer_pointer++)=ser_receive;
    17ec:	80 91 17 02 	lds	r24, 0x0217
    17f0:	90 91 18 02 	lds	r25, 0x0218
    17f4:	20 91 1f 02 	lds	r18, 0x021F
    17f8:	fc 01       	movw	r30, r24
    17fa:	20 83       	st	Z, r18
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	90 93 18 02 	sts	0x0218, r25
    1802:	80 93 17 02 	sts	0x0217, r24
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	ff 91       	pop	r31
    180c:	ef 91       	pop	r30
    180e:	9f 91       	pop	r25
    1810:	8f 91       	pop	r24
    1812:	2f 91       	pop	r18
    1814:	0f 90       	pop	r0
    1816:	00 92 5b 00 	sts	0x005B, r0
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <main>:

int main(void)
{
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	serial_init();
    182c:	0e 94 9e 0b 	call	0x173c	; 0x173c <serial_init>
	lcd_port_config();
    1830:	0e 94 c1 0b 	call	0x1782	; 0x1782 <lcd_port_config>
	//lcd_init();
	receive_buffer_pointer=&receive_buffer; //initialize pointer
    1834:	84 e1       	ldi	r24, 0x14	; 20
    1836:	92 e0       	ldi	r25, 0x02	; 2
    1838:	90 93 18 02 	sts	0x0218, r25
    183c:	80 93 17 02 	sts	0x0217, r24
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <main+0x20>
		}
		
		
		//set_bits_macro(port[receive_buffer[1]],receive_buffer[0]);

		}	
    1842:	00 00       	nop
	//ptr=string[1];
	//DDRJ=0xFF;
	//DDRC=0xFF;
	while(1)
	{
		if (flag==4) //if three bytes received
    1844:	80 91 00 02 	lds	r24, 0x0200
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	d9 f7       	brne	.-10     	; 0x1842 <main+0x1e>
		{
			flag=1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 93 00 02 	sts	0x0200, r24
			switch (receive_buffer[2])
    1852:	80 91 16 02 	lds	r24, 0x0216
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	d9 f0       	breq	.+54     	; 0x1894 <main+0x70>
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 05       	cpc	r25, r1
    1862:	91 f5       	brne	.+100    	; 0x18c8 <main+0xa4>
			{
				case 0x01:set_bits_macro(port[(int)receive_buffer[1]],receive_buffer[0]);
    1864:	80 91 15 02 	lds	r24, 0x0215
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	9d 4f       	sbci	r25, 0xFD	; 253
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	fc 01       	movw	r30, r24
    187c:	40 81       	ld	r20, Z
    187e:	51 81       	ldd	r21, Z+1	; 0x01
    1880:	20 91 14 02 	lds	r18, 0x0214
    1884:	22 2f       	mov	r18, r18
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	24 2b       	or	r18, r20
    188a:	35 2b       	or	r19, r21
    188c:	fc 01       	movw	r30, r24
    188e:	31 83       	std	Z+1, r19	; 0x01
    1890:	20 83       	st	Z, r18
					break;
    1892:	1b c0       	rjmp	.+54     	; 0x18ca <main+0xa6>
				case 0x00:clear_bits_macro(port[(int)receive_buffer[1]],receive_buffer[0]);
    1894:	80 91 15 02 	lds	r24, 0x0215
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	8f 5f       	subi	r24, 0xFF	; 255
    18a2:	9d 4f       	sbci	r25, 0xFD	; 253
    18a4:	fc 01       	movw	r30, r24
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	fc 01       	movw	r30, r24
    18ac:	40 81       	ld	r20, Z
    18ae:	51 81       	ldd	r21, Z+1	; 0x01
    18b0:	20 91 14 02 	lds	r18, 0x0214
    18b4:	22 2f       	mov	r18, r18
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	20 95       	com	r18
    18ba:	30 95       	com	r19
    18bc:	24 23       	and	r18, r20
    18be:	35 23       	and	r19, r21
    18c0:	fc 01       	movw	r30, r24
    18c2:	31 83       	std	Z+1, r19	; 0x01
    18c4:	20 83       	st	Z, r18
					break;
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <main+0xa6>
				default:break;
    18c8:	00 00       	nop
			}
			receive_buffer_pointer=&receive_buffer[0]; //reinitialize pointer
    18ca:	84 e1       	ldi	r24, 0x14	; 20
    18cc:	92 e0       	ldi	r25, 0x02	; 2
    18ce:	90 93 18 02 	sts	0x0218, r25
    18d2:	80 93 17 02 	sts	0x0217, r24
		}
		
		
		//set_bits_macro(port[receive_buffer[1]],receive_buffer[0]);

		}	
    18d6:	b5 cf       	rjmp	.-150    	; 0x1842 <main+0x1e>

000018d8 <__cmpsf2>:
    18d8:	2f d0       	rcall	.+94     	; 0x1938 <__fp_cmp>
    18da:	08 f4       	brcc	.+2      	; 0x18de <__cmpsf2+0x6>
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	08 95       	ret

000018e0 <__fixunssfsi>:
    18e0:	57 d0       	rcall	.+174    	; 0x1990 <__fp_splitA>
    18e2:	88 f0       	brcs	.+34     	; 0x1906 <__fixunssfsi+0x26>
    18e4:	9f 57       	subi	r25, 0x7F	; 127
    18e6:	90 f0       	brcs	.+36     	; 0x190c <__fixunssfsi+0x2c>
    18e8:	b9 2f       	mov	r27, r25
    18ea:	99 27       	eor	r25, r25
    18ec:	b7 51       	subi	r27, 0x17	; 23
    18ee:	a0 f0       	brcs	.+40     	; 0x1918 <__fixunssfsi+0x38>
    18f0:	d1 f0       	breq	.+52     	; 0x1926 <__fixunssfsi+0x46>
    18f2:	66 0f       	add	r22, r22
    18f4:	77 1f       	adc	r23, r23
    18f6:	88 1f       	adc	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	1a f0       	brmi	.+6      	; 0x1902 <__fixunssfsi+0x22>
    18fc:	ba 95       	dec	r27
    18fe:	c9 f7       	brne	.-14     	; 0x18f2 <__fixunssfsi+0x12>
    1900:	12 c0       	rjmp	.+36     	; 0x1926 <__fixunssfsi+0x46>
    1902:	b1 30       	cpi	r27, 0x01	; 1
    1904:	81 f0       	breq	.+32     	; 0x1926 <__fixunssfsi+0x46>
    1906:	5e d0       	rcall	.+188    	; 0x19c4 <__fp_zero>
    1908:	b1 e0       	ldi	r27, 0x01	; 1
    190a:	08 95       	ret
    190c:	5b c0       	rjmp	.+182    	; 0x19c4 <__fp_zero>
    190e:	67 2f       	mov	r22, r23
    1910:	78 2f       	mov	r23, r24
    1912:	88 27       	eor	r24, r24
    1914:	b8 5f       	subi	r27, 0xF8	; 248
    1916:	39 f0       	breq	.+14     	; 0x1926 <__fixunssfsi+0x46>
    1918:	b9 3f       	cpi	r27, 0xF9	; 249
    191a:	cc f3       	brlt	.-14     	; 0x190e <__fixunssfsi+0x2e>
    191c:	86 95       	lsr	r24
    191e:	77 95       	ror	r23
    1920:	67 95       	ror	r22
    1922:	b3 95       	inc	r27
    1924:	d9 f7       	brne	.-10     	; 0x191c <__fixunssfsi+0x3c>
    1926:	3e f4       	brtc	.+14     	; 0x1936 <__fixunssfsi+0x56>
    1928:	90 95       	com	r25
    192a:	80 95       	com	r24
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	08 95       	ret

00001938 <__fp_cmp>:
    1938:	99 0f       	add	r25, r25
    193a:	00 08       	sbc	r0, r0
    193c:	55 0f       	add	r21, r21
    193e:	aa 0b       	sbc	r26, r26
    1940:	e0 e8       	ldi	r30, 0x80	; 128
    1942:	fe ef       	ldi	r31, 0xFE	; 254
    1944:	16 16       	cp	r1, r22
    1946:	17 06       	cpc	r1, r23
    1948:	e8 07       	cpc	r30, r24
    194a:	f9 07       	cpc	r31, r25
    194c:	c0 f0       	brcs	.+48     	; 0x197e <__fp_cmp+0x46>
    194e:	12 16       	cp	r1, r18
    1950:	13 06       	cpc	r1, r19
    1952:	e4 07       	cpc	r30, r20
    1954:	f5 07       	cpc	r31, r21
    1956:	98 f0       	brcs	.+38     	; 0x197e <__fp_cmp+0x46>
    1958:	62 1b       	sub	r22, r18
    195a:	73 0b       	sbc	r23, r19
    195c:	84 0b       	sbc	r24, r20
    195e:	95 0b       	sbc	r25, r21
    1960:	39 f4       	brne	.+14     	; 0x1970 <__fp_cmp+0x38>
    1962:	0a 26       	eor	r0, r26
    1964:	61 f0       	breq	.+24     	; 0x197e <__fp_cmp+0x46>
    1966:	23 2b       	or	r18, r19
    1968:	24 2b       	or	r18, r20
    196a:	25 2b       	or	r18, r21
    196c:	21 f4       	brne	.+8      	; 0x1976 <__fp_cmp+0x3e>
    196e:	08 95       	ret
    1970:	0a 26       	eor	r0, r26
    1972:	09 f4       	brne	.+2      	; 0x1976 <__fp_cmp+0x3e>
    1974:	a1 40       	sbci	r26, 0x01	; 1
    1976:	a6 95       	lsr	r26
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	81 1d       	adc	r24, r1
    197c:	81 1d       	adc	r24, r1
    197e:	08 95       	ret

00001980 <__fp_split3>:
    1980:	57 fd       	sbrc	r21, 7
    1982:	90 58       	subi	r25, 0x80	; 128
    1984:	44 0f       	add	r20, r20
    1986:	55 1f       	adc	r21, r21
    1988:	59 f0       	breq	.+22     	; 0x19a0 <__fp_splitA+0x10>
    198a:	5f 3f       	cpi	r21, 0xFF	; 255
    198c:	71 f0       	breq	.+28     	; 0x19aa <__fp_splitA+0x1a>
    198e:	47 95       	ror	r20

00001990 <__fp_splitA>:
    1990:	88 0f       	add	r24, r24
    1992:	97 fb       	bst	r25, 7
    1994:	99 1f       	adc	r25, r25
    1996:	61 f0       	breq	.+24     	; 0x19b0 <__fp_splitA+0x20>
    1998:	9f 3f       	cpi	r25, 0xFF	; 255
    199a:	79 f0       	breq	.+30     	; 0x19ba <__fp_splitA+0x2a>
    199c:	87 95       	ror	r24
    199e:	08 95       	ret
    19a0:	12 16       	cp	r1, r18
    19a2:	13 06       	cpc	r1, r19
    19a4:	14 06       	cpc	r1, r20
    19a6:	55 1f       	adc	r21, r21
    19a8:	f2 cf       	rjmp	.-28     	; 0x198e <__fp_split3+0xe>
    19aa:	46 95       	lsr	r20
    19ac:	f1 df       	rcall	.-30     	; 0x1990 <__fp_splitA>
    19ae:	08 c0       	rjmp	.+16     	; 0x19c0 <__fp_splitA+0x30>
    19b0:	16 16       	cp	r1, r22
    19b2:	17 06       	cpc	r1, r23
    19b4:	18 06       	cpc	r1, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	f1 cf       	rjmp	.-30     	; 0x199c <__fp_splitA+0xc>
    19ba:	86 95       	lsr	r24
    19bc:	71 05       	cpc	r23, r1
    19be:	61 05       	cpc	r22, r1
    19c0:	08 94       	sec
    19c2:	08 95       	ret

000019c4 <__fp_zero>:
    19c4:	e8 94       	clt

000019c6 <__fp_szero>:
    19c6:	bb 27       	eor	r27, r27
    19c8:	66 27       	eor	r22, r22
    19ca:	77 27       	eor	r23, r23
    19cc:	cb 01       	movw	r24, r22
    19ce:	97 f9       	bld	r25, 7
    19d0:	08 95       	ret

000019d2 <__gesf2>:
    19d2:	b2 df       	rcall	.-156    	; 0x1938 <__fp_cmp>
    19d4:	08 f4       	brcc	.+2      	; 0x19d8 <__gesf2+0x6>
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	08 95       	ret

000019da <__mulsf3>:
    19da:	0b d0       	rcall	.+22     	; 0x19f2 <__mulsf3x>
    19dc:	78 c0       	rjmp	.+240    	; 0x1ace <__fp_round>
    19de:	69 d0       	rcall	.+210    	; 0x1ab2 <__fp_pscA>
    19e0:	28 f0       	brcs	.+10     	; 0x19ec <__mulsf3+0x12>
    19e2:	6e d0       	rcall	.+220    	; 0x1ac0 <__fp_pscB>
    19e4:	18 f0       	brcs	.+6      	; 0x19ec <__mulsf3+0x12>
    19e6:	95 23       	and	r25, r21
    19e8:	09 f0       	breq	.+2      	; 0x19ec <__mulsf3+0x12>
    19ea:	5a c0       	rjmp	.+180    	; 0x1aa0 <__fp_inf>
    19ec:	5f c0       	rjmp	.+190    	; 0x1aac <__fp_nan>
    19ee:	11 24       	eor	r1, r1
    19f0:	ea cf       	rjmp	.-44     	; 0x19c6 <__fp_szero>

000019f2 <__mulsf3x>:
    19f2:	c6 df       	rcall	.-116    	; 0x1980 <__fp_split3>
    19f4:	a0 f3       	brcs	.-24     	; 0x19de <__mulsf3+0x4>

000019f6 <__mulsf3_pse>:
    19f6:	95 9f       	mul	r25, r21
    19f8:	d1 f3       	breq	.-12     	; 0x19ee <__mulsf3+0x14>
    19fa:	95 0f       	add	r25, r21
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	55 1f       	adc	r21, r21
    1a00:	62 9f       	mul	r22, r18
    1a02:	f0 01       	movw	r30, r0
    1a04:	72 9f       	mul	r23, r18
    1a06:	bb 27       	eor	r27, r27
    1a08:	f0 0d       	add	r31, r0
    1a0a:	b1 1d       	adc	r27, r1
    1a0c:	63 9f       	mul	r22, r19
    1a0e:	aa 27       	eor	r26, r26
    1a10:	f0 0d       	add	r31, r0
    1a12:	b1 1d       	adc	r27, r1
    1a14:	aa 1f       	adc	r26, r26
    1a16:	64 9f       	mul	r22, r20
    1a18:	66 27       	eor	r22, r22
    1a1a:	b0 0d       	add	r27, r0
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	66 1f       	adc	r22, r22
    1a20:	82 9f       	mul	r24, r18
    1a22:	22 27       	eor	r18, r18
    1a24:	b0 0d       	add	r27, r0
    1a26:	a1 1d       	adc	r26, r1
    1a28:	62 1f       	adc	r22, r18
    1a2a:	73 9f       	mul	r23, r19
    1a2c:	b0 0d       	add	r27, r0
    1a2e:	a1 1d       	adc	r26, r1
    1a30:	62 1f       	adc	r22, r18
    1a32:	83 9f       	mul	r24, r19
    1a34:	a0 0d       	add	r26, r0
    1a36:	61 1d       	adc	r22, r1
    1a38:	22 1f       	adc	r18, r18
    1a3a:	74 9f       	mul	r23, r20
    1a3c:	33 27       	eor	r19, r19
    1a3e:	a0 0d       	add	r26, r0
    1a40:	61 1d       	adc	r22, r1
    1a42:	23 1f       	adc	r18, r19
    1a44:	84 9f       	mul	r24, r20
    1a46:	60 0d       	add	r22, r0
    1a48:	21 1d       	adc	r18, r1
    1a4a:	82 2f       	mov	r24, r18
    1a4c:	76 2f       	mov	r23, r22
    1a4e:	6a 2f       	mov	r22, r26
    1a50:	11 24       	eor	r1, r1
    1a52:	9f 57       	subi	r25, 0x7F	; 127
    1a54:	50 40       	sbci	r21, 0x00	; 0
    1a56:	8a f0       	brmi	.+34     	; 0x1a7a <__mulsf3_pse+0x84>
    1a58:	e1 f0       	breq	.+56     	; 0x1a92 <__mulsf3_pse+0x9c>
    1a5a:	88 23       	and	r24, r24
    1a5c:	4a f0       	brmi	.+18     	; 0x1a70 <__mulsf3_pse+0x7a>
    1a5e:	ee 0f       	add	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	bb 1f       	adc	r27, r27
    1a64:	66 1f       	adc	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	91 50       	subi	r25, 0x01	; 1
    1a6c:	50 40       	sbci	r21, 0x00	; 0
    1a6e:	a9 f7       	brne	.-22     	; 0x1a5a <__mulsf3_pse+0x64>
    1a70:	9e 3f       	cpi	r25, 0xFE	; 254
    1a72:	51 05       	cpc	r21, r1
    1a74:	70 f0       	brcs	.+28     	; 0x1a92 <__mulsf3_pse+0x9c>
    1a76:	14 c0       	rjmp	.+40     	; 0x1aa0 <__fp_inf>
    1a78:	a6 cf       	rjmp	.-180    	; 0x19c6 <__fp_szero>
    1a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7c:	ec f3       	brlt	.-6      	; 0x1a78 <__mulsf3_pse+0x82>
    1a7e:	98 3e       	cpi	r25, 0xE8	; 232
    1a80:	dc f3       	brlt	.-10     	; 0x1a78 <__mulsf3_pse+0x82>
    1a82:	86 95       	lsr	r24
    1a84:	77 95       	ror	r23
    1a86:	67 95       	ror	r22
    1a88:	b7 95       	ror	r27
    1a8a:	f7 95       	ror	r31
    1a8c:	e7 95       	ror	r30
    1a8e:	9f 5f       	subi	r25, 0xFF	; 255
    1a90:	c1 f7       	brne	.-16     	; 0x1a82 <__mulsf3_pse+0x8c>
    1a92:	fe 2b       	or	r31, r30
    1a94:	88 0f       	add	r24, r24
    1a96:	91 1d       	adc	r25, r1
    1a98:	96 95       	lsr	r25
    1a9a:	87 95       	ror	r24
    1a9c:	97 f9       	bld	r25, 7
    1a9e:	08 95       	ret

00001aa0 <__fp_inf>:
    1aa0:	97 f9       	bld	r25, 7
    1aa2:	9f 67       	ori	r25, 0x7F	; 127
    1aa4:	80 e8       	ldi	r24, 0x80	; 128
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	08 95       	ret

00001aac <__fp_nan>:
    1aac:	9f ef       	ldi	r25, 0xFF	; 255
    1aae:	80 ec       	ldi	r24, 0xC0	; 192
    1ab0:	08 95       	ret

00001ab2 <__fp_pscA>:
    1ab2:	00 24       	eor	r0, r0
    1ab4:	0a 94       	dec	r0
    1ab6:	16 16       	cp	r1, r22
    1ab8:	17 06       	cpc	r1, r23
    1aba:	18 06       	cpc	r1, r24
    1abc:	09 06       	cpc	r0, r25
    1abe:	08 95       	ret

00001ac0 <__fp_pscB>:
    1ac0:	00 24       	eor	r0, r0
    1ac2:	0a 94       	dec	r0
    1ac4:	12 16       	cp	r1, r18
    1ac6:	13 06       	cpc	r1, r19
    1ac8:	14 06       	cpc	r1, r20
    1aca:	05 06       	cpc	r0, r21
    1acc:	08 95       	ret

00001ace <__fp_round>:
    1ace:	09 2e       	mov	r0, r25
    1ad0:	03 94       	inc	r0
    1ad2:	00 0c       	add	r0, r0
    1ad4:	11 f4       	brne	.+4      	; 0x1ada <__fp_round+0xc>
    1ad6:	88 23       	and	r24, r24
    1ad8:	52 f0       	brmi	.+20     	; 0x1aee <__fp_round+0x20>
    1ada:	bb 0f       	add	r27, r27
    1adc:	40 f4       	brcc	.+16     	; 0x1aee <__fp_round+0x20>
    1ade:	bf 2b       	or	r27, r31
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <__fp_round+0x18>
    1ae2:	60 ff       	sbrs	r22, 0
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <__fp_round+0x20>
    1ae6:	6f 5f       	subi	r22, 0xFF	; 255
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	8f 4f       	sbci	r24, 0xFF	; 255
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	08 95       	ret

00001af0 <__udivmodhi4>:
    1af0:	aa 1b       	sub	r26, r26
    1af2:	bb 1b       	sub	r27, r27
    1af4:	51 e1       	ldi	r21, 0x11	; 17
    1af6:	07 c0       	rjmp	.+14     	; 0x1b06 <__udivmodhi4_ep>

00001af8 <__udivmodhi4_loop>:
    1af8:	aa 1f       	adc	r26, r26
    1afa:	bb 1f       	adc	r27, r27
    1afc:	a6 17       	cp	r26, r22
    1afe:	b7 07       	cpc	r27, r23
    1b00:	10 f0       	brcs	.+4      	; 0x1b06 <__udivmodhi4_ep>
    1b02:	a6 1b       	sub	r26, r22
    1b04:	b7 0b       	sbc	r27, r23

00001b06 <__udivmodhi4_ep>:
    1b06:	88 1f       	adc	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	5a 95       	dec	r21
    1b0c:	a9 f7       	brne	.-22     	; 0x1af8 <__udivmodhi4_loop>
    1b0e:	80 95       	com	r24
    1b10:	90 95       	com	r25
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	08 95       	ret

00001b18 <_exit>:
    1b18:	f8 94       	cli

00001b1a <__stop_program>:
    1b1a:	ff cf       	rjmp	.-2      	; 0x1b1a <__stop_program>
